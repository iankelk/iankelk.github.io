"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[1477],{10:e=>{e.exports=JSON.parse('{"blogPosts":[{"id":"secret-chickens","metadata":{"permalink":"/blog/secret-chickens","source":"@site/blog/2024-02-06-chickens/index.md","title":"The secret chickens that run LLMs","description":"Humans often organize large, skilled groups to undertake complex projects, yet often place less-than-competent individuals in charge. Despite this, they somehow succeed! Large language models (LLMs) seem to be carrying on this proud tradition with my new favorite metaphor of who\'s ultimately responsible for the text they generate--a chicken.","date":"2024-02-06T00:00:00.000Z","tags":[{"label":"distribution","permalink":"/blog/tags/distribution"},{"label":"sampling","permalink":"/blog/tags/sampling"},{"label":"top-p","permalink":"/blog/tags/top-p"},{"label":"top-k","permalink":"/blog/tags/top-k"},{"label":"temperature","permalink":"/blog/tags/temperature"},{"label":"AGI","permalink":"/blog/tags/agi"},{"label":"ASI","permalink":"/blog/tags/asi"},{"label":"chatgpt","permalink":"/blog/tags/chatgpt"},{"label":"chat","permalink":"/blog/tags/chat"},{"label":"AI","permalink":"/blog/tags/ai"},{"label":"LLM","permalink":"/blog/tags/llm"},{"label":"ML","permalink":"/blog/tags/ml"},{"label":"chatbot","permalink":"/blog/tags/chatbot"},{"label":"chatbots","permalink":"/blog/tags/chatbots"},{"label":"AIExplained","permalink":"/blog/tags/ai-explained"}],"readingTime":28.086666666666666,"hasTruncateMarker":true,"authors":[{"name":"Ian Kelk","title":"Developer Relations @ Hume","url":"https://iankelk.github.io","imageURL":"https://github.com/iankelk.png","key":"ikelk"}],"frontMatter":{"slug":"secret-chickens","title":"The secret chickens that run LLMs","authors":["ikelk"],"tags":["distribution","sampling","top-p","top-k","temperature","AGI","ASI","chatgpt","chat","AI","LLM","ML","chatbot","chatbots","AIExplained"],"enableComments":true,"image":"https://github.com/iankelk/iankelk.github.io/blob/main/blog/2024-02-06-chickens/social-card.jpg?raw=true"},"unlisted":false,"nextItem":{"title":"LLMs are forward thinkers, and that\'s a problem","permalink":"/blog/llm-forward-thinking"}},"content":"import CodeBlock from \\"@theme/CodeBlock\\";\\nimport Figure from \'@site/src/components/figure\';\\nimport ChatConversation from \'@site/src/components/chat_conversation\';\\n\\nimport chickenWink from \'./social-card.jpg\';\\nimport kyleField from \'./kyle_field.jpg\';\\nimport chickenOriginal from \'./chicken-original.jpg\';\\nimport chicken50k from \'./chicken-50k.jpg\';\\nimport nn from \'./nn-man.jpg\';\\nimport ninja from \'./ninja.jpg\';\\nimport chickenQuizzical from \'./chicken-quizzical.jpg\';\\nimport introChicken from \'./chicken-intro.jpg\';\\nimport coinFlip from \'./coinflip.jpg\';\\nimport chickenTuning from \'./chicken-tuning.jpg\';\\nimport chickenLowTemp from \'./chicken-low-temp.jpg\';\\nimport chickenHighTemp from \'./chicken-high-temp.jpg\';\\nimport chickenTopK from \'./chicken-top-k.jpg\';\\nimport chickenTopKRenorm from \'./chicken-top-k-renorm.jpg\';\\nimport chickenTopP from \'./chicken-top-p.jpg\';\\nimport chickenTopPRenorm from \'./chicken-top-p-renorm.jpg\';\\nimport cards from \'./cards.jpg\';\\nimport hiddenChicken from \'./hidden-chicken.jpg\';\\n\\n\\nHumans often organize large, skilled groups to undertake complex projects, yet often place less-than-competent individuals in charge. Despite this, they somehow succeed! Large language models (LLMs) seem to be carrying on this proud tradition with my new favorite metaphor of who\'s ultimately responsible for the text they generate--a chicken.\\n\\n:::note\\n\\nIn this post, I use the term *word* instead of *token* to describe what an LLM predicts. This is just a useful simplification to avoid having to address why the model might predict half a word or a semicolon, since the underlying principles of the \\"stochastic chicken\\" are the same.\\n\\n:::\\n\\n<Figure\\n  image={chickenWink}\\n  alt=\\"An illustration that features a whimsical chicken winking at the camera with an expression reminiscent of Mr. Beast in a YouTube thumbnail. The chicken, full of personality and charm, is front and center. In the background, there\'s a plethora of computers and tech equipment, suggesting a high-energy, creative digital workspace or a gaming setup. This mix of traditional and modern elements should capture the playful, engaging spirit of online content creation, all rendered in the sophisticated, detailed aesthetic of New Yorker illustrations. The artwork should be dynamic and filled with intricate details that invite the viewer to explore the scene.\\"\\n  caption=\\"Generated with OpenAI DALL-E 3 and edited by the author.\\"\\n/>\\n\\n:::tip[Some key points I\'ll address here are:]\\n\\n- Modern LLMs are huge and incredibly sophisticated. Yet despite their size and complexity, for every word they generate, they have to hand their predictions over to a random function to pick the actual word.\\n- These random functions that choose the word are no smarter than a chicken pecking at different piles of feed which chooses the word.\\n- Without these \\"stochastic chickens\\", large language models wouldn\'t work.\\n:::\\n\\n\x3c!-- truncate --\x3e\\n\\n## LLMs aren\'t messing around when they say they\'re \\"large\\" \\n\\nPicture a stadium full of people. Here\'s [Kyle Field](https://en.wikipedia.org/wiki/Kyle_Field) in College Station, Texas, with a seating capacity of 102,733. In this photo from 2015 it looks pretty full, so let\'s assume there are 100,000 people there.\\n\\n<Figure\\n  image={kyleField}\\n  alt=\\"A panorama of the interior of Kyle Field in College Station, Texas. Taken at the Ball State game during the 2015 season.\\"\\n  caption=\\"Attribution: [Janreagan](https://en.wikipedia.org/wiki/User:Janreagan) at [Wikipedia Commons](https://commons.wikimedia.org/wiki/File:Kyle_Field_Panorama.jpg)\\"\\n/>\\n\\nWe\'ve given each one of these (very patient) people a calculator, and given them the instruction that the person in the seat in front of them will give them some number, at which point they need to do a little work on their calculator and pass their new number to the person behind them. For the sake of this analogy, let\'s assume that despite a considerable number of them being distracted, drunk, or children, they all are able to complete the task.\\n\\nAs the number travels from the front of the stadium to the back, it undergoes a series of transformations. Each person\'s \\"little work\\" on their calculator is akin to the operations performed by neurons in a layer of the neural network\u2014applying weights (learned parameters), adding biases, and passing through activation functions. These transformations are based on the knowledge embedded in the model\'s parameters, trained to recognize patterns, relationships, and the structure of language.\\n\\nBy the time the number reaches the last person in the stadium, it has been transformed multiple times, each step incorporating more context and adjusting the calculation based on the instructions (the model\'s architecture and trained parameters). This final result can be seen as the model\'s output\u2014a complex representation of the input data that encodes the probabilities of the next possible word.\\n\\nBut here\'s the strange part: despite all this incredible depth of stored knowledge, we\'re going to take the recommended answers provided by these thousands of people, and select one using a completely random process. It\'s kind of like a huge pyramid where people work together to assemble a set of possible answers to a problem, then hand it at the top to a person flipping a coin.\\n\\n<Figure\\n  image={coinFlip}\\n  alt=\\"A person flipping a coin atop a pyramid of thousands of people working to solve a problem.\\"\\n  caption=\\"\'Guys... I\'m not sure our boss is as smart as we think he is...\'\\\\nGenerated with OpenAI DALL-E 3 and edited by the author.\\"\\n/>\\n\\n\\nActually, we can do better than this. To really illustrate the contrast between the complexity of a  model with billions of parameters getting its final answer from a dumb-as-a-rock random number generator, let\'s use something truly silly. Let\'s use a chicken. \\n\\nTo get this chicken involved, we\'re going to use the results of our calculations to create piles of chicken feed, each one representing a potential next word the model might generate. The bigger the pile, the higher the probability that word should be selected.\\n\\n<Figure\\n  image={introChicken}\\n  alt=\\"A robot handing a paper to a chicken\\"\\n  caption=\\"Generated with OpenAI DALL-E 3 and edited by the author.\\"\\n/>\\n\\n:::warning\\n\\nI am not a licensed farmer, and this is just how I assume chickens work.\\n\\n:::\\n\\nThe chicken, oblivious to the tireless efforts of the stadium\'s occupants, simply wanders among the piles of chicken feed. Its choice is guided by the sizes of these piles\u2014larger piles are more enticing because they are easier to spot and peck at, but the chicken also has ADHD. It\'s whims or a sudden distraction might send it running to a smaller pile instead.\\n\\nWhy on earth would we do something like this? Why would we create massive, intelligent machines ultimately rely on the random judgments of a gambling idiot?\\n\\nThe answer is that deep language models such as LLMs are built with neural networks, and neural networks are deterministic.\\n\\n### What does deterministic mean?\\n\\nBeing deterministic means that if you do something exactly the same way every time, you\'ll always get the same result. There\'s no randomness or chance involved. Think of it like a using a simple calculator; if you type in $2 + 2$ on any basic calculator, it will always show \\"4\\". It won\'t suddenly decide to show \\"5\\" one day.\\n\\nIn contrast, something that\'s not deterministic (we call this stochastic) is like rolling a dice; even if you try to do it the same way each time, you can get different outcomes because chance is involved. So, deterministic means predictable and consistent, with no surprises based on how you started.\\n\\n### Why are neural networks deterministic?\\n\\nA neural network is a complex system inspired by the human brain, designed to recognize patterns and solve problems. It\'s made up of layers of artificial neurons, which are small, simple units that perform mathematical operations. Each neuron takes in some input, does some mathematical function to it, and then passes the result on to the next neuron in line.\\n\\nAs a huge simplification of how these models work, these neurons are organized into layers: there\'s an input layer that receives the initial data (like the token representations of words in a sentence), one or more hidden layers that process the data further, and an output layer that provides the final decision (the probability distribution for the predicted next word in the text).\\n\\nThe diagram below might look **crazy** complicated, but the only thing you need to understand is that each line represents some math function performed from one circle to the next. Some numbers go in one side, and some numbers go out the other side.\\n\\n<Figure\\n  image={nn}\\n  alt=\\"A neural network\\"\\n  caption=\\"Maybe it looks scary, but each line connecting the dots is just a little math that never changes.\\\\nGenerated with [NN-SVG](https://alexlenail.me/NN-SVG/) and DALL-E 3\\"\\n/>\\n\\nThe reason a neural network is deterministic lies in how these artificial neurons are connected and how they process data. If you give the network the same input and the network has not been changed (its weights, or how much it values certain pieces of input, remain the same), it will always perform the same calculations in the same order, and thus return the same output. While LLMs will have *billions* of these neurons, the basic idea is the same: for a given input, you will **always** get the same output. Typing $2+5\\\\times10$ into a calculator will always give you $52$, no matter how many times you do it.\\n\\n### So why do LLMs give different responses each time to the same prompt?\\n\\n\\nThis seems suspicious. If you ask an LLM the same thing multiple times, it will give you different answers each time. This contradicts the claim that neural networks are deterministic, right? \\n\\n## *ENTER THE CHICKEN*\\n\\n<Figure\\n  image={ninja}\\n  alt=\\"A movie poster featuring a ninja chicken as the protagonist. This vivid depiction showcases the ninja chicken in an epic stance, wielding nunchucks, against a bustling city night. The poster\'s design incorporates a mix of dark humor and action, titled \'Ninja Chicken: Shadow of the Night,\' with engaging taglines such as \'Feathers of Fury\' and \'When the city sleeps, the cluck awakens.\' The artwork blends the refined essence of New Yorker visuals with the excitement and suspense of a blockbuster movie poster, emphasizing the ninja chicken\'s heroic silhouette against a backdrop of neon lights and urban mystery. The illustration creates an intriguing narrative of adventure and comedy, appealing to viewers\' imaginations.\\"\\n  caption=\\"Generated with OpenAI DALL-E 3 and edited by the author.\\"\\n/>\\n\\nThis is why we need the chicken. The chicken is stochastic, and adds randomness and unpredictability to the LLM.\\n\\nThe humans, who for some reason have deified a chicken, will present the chicken with a series of words and probabilities. Technically these are not words but *tokens*; however, for the sake of simplifying this analogy let\'s refer to them as words. These words and probabilities can be visualized as a series of piles of chicken feed, where each word pile\'s size corresponds to their probability.\\n\\nLet\'s use an example! Here\'s a prompt that we can give to our language model to see what next word it\'s going to predict: **\\"After midnight, the cat decided to...\\"**\\n\\nIf we show all the possible words that could finish this sentence, the number of food piles would match the size of the model\'s vocabulary. For a model like GPT-3, this would be **50,257** piles of food!\\n\\n:::note\\n\\nThe way that GPT-3 can encapsulate all the words in 50+ languages into just 50,257 tokens is its own special magic that I\'ll cover later. Here\'s a [Wikipedia link](https://en.wikipedia.org/wiki/Byte_pair_encoding) in the meantime.\\n\\n:::\\n\\n<Figure\\n  image={chicken50k}\\n  alt=\\"Illustration depicting a chicken looking down a long line of seed piles that extends into the horizon, giving the illusion of an infinite number of piles. The seeds are on pieces of paper with words written on them, and the size of the piles and the spacing between them decrease as they recede into the distance, enhancing the perception of infinity. The scene is elegantly composed, capturing the curiosity of the chicken as it contemplates the endless supply, embodying the sophisticated and artistic essence of The New Yorker\'s visual storytelling. The aspect ratio of the image is 7:4.\\"\\n  caption=\\"How the heck is an image like this going to help us understand how the chicken chooses the feed?\\\\nGenerated with OpenAI DALL-E 3\\"\\n/>\\n\\nClearly trying to visualize a chicken choosing from 50,257 options isn\'t very useful. Let\'s instead limit our chicken\'s choices to only the top 6 words that the language model chose. Here are the options for the chicken and how it might look when the chicken is presented with them:\\n\\n\\n| Activity  | blog | meditate | cook | eat  | sleep | hunt |\\n|-----------|------|----------|------|------|-------|------|\\n| Probability | 0.03 |   0.05   | 0.1  | 0.15 |  0.2  | 0.25 |\\n\\n### \\"After midnight, the cat decided to...\\"\\n\\n<Figure\\n  image={chickenOriginal}\\n  alt=\\"Illustration depicting a chicken pecking at five different piles of seed. The seeds are neatly lined up, each on a separate piece of paper with a word written on it. The amount of seed in each pile forms a power law distribution, with the first pile having the most seeds and the amount decreasing in each subsequent pile. The scene is elegantly composed, with the chicken engaging with the piles in a curious and orderly manner. The aspect ratio of the image is 7:4.\\"\\n  caption=\\"Showing the top 6 options makes things a lot easier to understand.\\\\nChicken and feed generated with OpenAI DALL-E 3 and edited by the author.\\"\\n/>\\n\\nLet\'s suppose the chicken decides to choose the word **\\"eat\\"**, despite it only being the third most probably word since it has the third largest feed pile.\\n\\nUnfortunately, our chicken\'s work is just beginning, because it will now need to choose every subsequent word in the following way. Once again, it will be presented with a list of probable words from thousands of hardworking humans in the stadium, and once again it will have to use its tiny chicken brain to select a word. Now our prompt to complete is **\\"After midnight, the cat decided to eat...\\"** with the following top 6 possible words and their probability distribution:\\n\\n| Food  | birds | plants | grass | mice  | catnip | tuna |\\n|-----------|------|----------|------|------|-------|------|\\n| Probability | 0.02 |   0.04   | 0.11  | 0.13 |  0.22  | 0.23 |\\n\\n### \\"After midnight, the cat decided to eat...\\"\\n\\n<Figure\\n  image={chickenQuizzical}\\n  alt=\\"Illustration depicting a chicken pecking at five different piles of seed. The seeds are neatly lined up, each on a separate piece of paper with a word written on it. The amount of seed in each pile forms a power law distribution, with the first pile having the most seeds and the amount decreasing in each subsequent pile. The scene is elegantly composed, with the chicken engaging with the piles in a curious and orderly manner. The aspect ratio of the image is 7:4.\\"\\n  caption=\\"One word down, just a few hundred more to go.\\\\nChicken and feed generated with OpenAI DALL-E 3 and edited by the author.\\"\\n/>\\n\\nThe incredible irony of all this is that some of these language models are trained using *trillions* of words\u2014comprising the collective works of humanity\u2014and costing *millions* of dollars in the process. We then hand these predictions over to an unintelligent gambling chicken to choose what to actually say. With each choice from the chicken, the model\'s output increasingly diverges from the sequence of the most statistically probable words. Somehow, this produces more natural-sounding language.\\n\\nIt\'s kinda bonkers.\\n\\nIn fact, not using the chicken\u2014and just taking the most probable words from the LLM\u2014generates poor language. This is called *greedy decoding*, and it has a whole host of problems.\\n\\n## Why we need the chicken\\n\\n### Repetitiveness\\n\\nGreedy decoding tends to produce repetitive or looped text. Since it always chooses the most probable next word, it can get stuck in a pattern where the same sequence of words keeps being selected. This can happen in situations where the model finds a certain pattern of text to be highly probable and, without a certain chicken to encourage diversity, falls into a cycle of selecting the same sequence over and over again.\\n\\nHere\'s a short example with some creative writing:\\n\\n**Prompt**: \\"Write a short story taking place in a park in the morning\\"\\n\\nThe model begins the sentence without issue, and begins by writing \\"The park was serene in the early morning, with\\", but then it runs into problems.\\n\\n**Greedy Decoding Sequence**:\\n1. The model predicts \\"the\\" as the most probable next word.\\n2. Following \\"the\\", it predicts \\"birds\\" as the next word.\\n3. After \\"birds\\", it predicts \\"were\\" as the next word.\\n4. Then, \\"singing\\" is predicted.\\n5. However, after \\"singing\\", the model might predict \\"in\\" as the next most probable word, leading back to \\"the\\" again, and then \\"park\\", forming a loop.\\n6. We get this conversation:\\n\\n\\n<ChatConversation\\n  conversation={[\\n    { speaker: \'user\', text: \'Write a short story taking place in a park in the morning\' },\\n    { speaker: \'chatbot\', text: \'The park was serene in the early morning, with the birds were singing in the park with the birds were singing in the park with the birds were singing in the park with the birds were singing in...\' },\\n  ]}\\n  userAvatar=\\"/img/userAvatar.jpeg\\"\\n  chatbotAvatar=\\"/img/chatbotAvatar.jpeg\\"\\n/>\\n<br />\\n\\n### Lack of Creativity and Diversity\\n\\nReal human language is rich and varied, often taking unexpected turns, beautiful jellyfish. By always choosing the most probable word, the generated text misses out on these creative and less predictable aspects of language, resulting in outputs that can feel dull or overly formulaic.\\n\\n### Contextual Inappropriateness\\n\\nThe most probable next word is not always appropriate. Language is highly contextual, and the best choice in one situation might not be the most statistically common one. Greedy decoding can lead to nonsensical or awkward phrases that, while grammatically correct, do not fit well with the preceding text.\\n\\nHere\'s another example using a job application:\\n\\n**Prompt**: \\"Write me a cover letter applying for a job in marketing\\"\\n\\nAgain the model begins the sentence without issue, and begins by writing \\"Dear Ms. Smith, I am writing to express my interest ...\\" but then again we hit a pothole.\\n\\nIn a cover letter for a job application, the language model should discuss the sender\'s relevant skills, experiences, or why they are a good fit for the job. However, a contextually inappropriate continuation might look like this:\\n\\n<ChatConversation\\n  conversation={[\\n    { speaker: \'user\', text: \'Write me a cover letter applying for a job in marketing\' },\\n    { speaker: \'chatbot\', text: \'Dear Ms. Smith, I am writing to express my interest in the marketing position advertised on your website. With my extensive experience in the field, I believe I am well-qualified for the role.\' },\\n    { speaker: \'chatbot\', text: \'In addition to my professional qualifications, I love to party on weekends and often go skydiving for fun. My favorite TV show is \\\\\'The Office,\\\\\' and I\\\\\'m a great cook. I\\\\\'m looking for an adventurous partner in crime who\\\\\'s down for an impromptu trip to Vegas or a quiet evening at home watching \\\\\\"Real Housewives\\\\\\".\'},\\n  ]}\\n  userAvatar=\\"/img/userAvatar.jpeg\\"\\n  chatbotAvatar=\\"/img/chatbotAvatar.jpeg\\"\\n/>\\n<br />\\n\\nThe model, perhaps trained on more dating profiles than job applications, has continued the cover letter using the *most* probable words it predicted. While language models can recognize patterns and generate text based on statistical probabilities, they don\'t understand context in the same way humans do. They might link professional qualifications to personal hobbies due to statistical correlations in the training data, not recognizing the formal context of a job application email.\\n\\n### Inability to Explore Multiple Paths\\n\\nGreedy decoding means that an LLM will always produce the same output for any given input. Asking it to \\"tell a story\\" for example, would always result in the same story, assuming it isn\'t plagued with the previously mentioned problems. Language generation, especially in creative or complex tasks, often benefits from considering multiple possible continuations at each step. Greedy decoding\'s linear path through the probability distribution means fewer interesting outputs that a more exploratory approach could uncover. \\n\\n## Tuning the chicken\\n\\nIf you\'ve ever dug into the optional parameters one of the LLM providers APIs, you might have references to tuning \\"inference hyperparameters\\" to control how \\"creative\\" an LLM can be. These are ways of finding a balance between coherence (sticking to a topic or narrative) and creativity (introducing novel ideas or phrases).\\n\\n:::info\\n\\nAn \\"inference hyperparameter\\" refers to a configuration for how a machine learning model, particularly language models, produce predictions. These settings, such as *temperature*, *top-k*, and *top-p*, control the behavior of the model when generating text, influencing aspects like diversity, randomness, and the overall style of the output. Unlike traditional hyperparameters set prior to training to guide the learning process, **inference hyperparameters** are set to optimize performance for specific tasks or outcomes.\\n\\n:::\\n\\nWhat may come as a surprise is that these methods don\'t modify the massive underlying neural network part of these models at all. They affect the chicken.\\n\\n<Figure\\n  image={chickenTuning}\\n  alt=\\"Illustrate an image in a sophisticated, detailed, and often humorous style. The scene depicts a woman carefully tuning a guitar. Uniquely, the guitar\'s headstock is whimsically replaced with the head of a chicken, blending the realms of music and whimsy. The woman, dressed in casual yet stylish attire, focuses intently on her task, unaware of the absurdity. The background is minimal but elegant, ensuring the focus remains on the interaction between the woman and her unusual instrument. The image is to be crafted with a keen eye for detail and a touch of surreal humor. The aspect ratio should be 7:4, providing a wide landscape view of this imaginative moment.\\"\\n  caption=\\"Working with the chicken to find the optimal tuning (Pen and ink with DALL-E 3, 2024)\\"\\n/>\\n\\n### Temperature\\n\\nTemperature is an inference hyperparameter used to control the randomness of predictions by scaling the logits (the raw output scores from the model) before applying the softmax function to get probabilities. The temperature parameter basically adjusts how conservative or adventurous the model\'s predictions are.\\n\\n#### Temperature = 1\\n\\nWhen the temperature is set to 1, it has no effect on the logits, and the model produces outcomes based on the trained probabilities. This is the default setting, where no scaling is applied, and the chicken\'s choices won\'t be affected.\\n\\n<Figure\\n  image={chickenOriginal}\\n  alt=\\"Illustration depicting a chicken pecking at five different piles of seed. The seeds are neatly lined up, each on a separate piece of paper with a word written on it. The amount of seed in each pile forms a power law distribution, with the first pile having the most seeds and the amount decreasing in each subsequent pile. The scene is elegantly composed, with the chicken engaging with the piles in a curious and orderly manner. The aspect ratio of the image is 7:4.\\"\\n  caption=\\"The original chicken image as shown previously\\\\nChicken and feed generated with OpenAI DALL-E 3 and edited by the author.\\"\\n/>\\n\\n#### Temperature < 1 (e.g., 0.5)\\n\\nLowering the temperature makes the model more confident in its outputs by increasing the gap between the probability of the most likely outcomes and the rest. This makes the chicken\'s choices less diverse and more deterministic; how could any chicken ignore that *huge* pile by the word \\"hunt\\"? A lower temperature is useful when you want the model to take fewer risks and stick closely to the most likely predictions. This can, however, lead to a lack of variety and potentially more repetitive outputs, since as the temperature approaches $0$ it approximates greedy decoding (with all the problems [previously discussed](#why-we-need-the-chicken)).\\n\\n<Figure\\n  image={chickenLowTemp}\\n  alt=\\"Illustration depicting a chicken pecking at five different piles of seed. The seeds are neatly lined up, each on a separate piece of paper with a word written on it. The amount of seed in each pile forms a power law distribution, with the first pile having the most seeds and the amount decreasing in each subsequent pile. The scene is elegantly composed, with the chicken engaging with the piles in a curious and orderly manner. The aspect ratio of the image is 7:4.\\"\\n  caption=\\"Using a lower temperature of 0.5, the differences between the probabilities have increased\\\\nChicken and feed generated with OpenAI DALL-E 3 and edited by the author.\\"\\n/>\\n\\n<details>\\n  <summary>How is this calculated? (math & Python code)</summary>\\n\\n  <div>\\n      Using our original distribution with probabilities of 0.03, 0.05, 0.1, 0.15, 0.2, and 0.25. How would these change if we used a temperature of 0.5?\\n\\n      Given a distribution of probabilities $P = [0.03, 0.05, 0.1, 0.15, 0.2, 0.25]$ and a temperature $T = 0.5$, we adjust the probabilities as follows:\\n\\n      1. **Compute the logits**: In this context, you can think of logits as the pre-softmax outputs that the model uses to calculate probabilities. However, since we start with probabilities and want to adjust them by temperature, we reverse-engineer logits by taking the natural logarithm of the probabilities. Thus, the logit for each probability $p_i$ in $P$ is given by:\\n\\n      $$\\n      \\\\text{logit}(p_i) = \\\\log(p_i)\\n      $$\\n\\n      2. **Scale the logits by the temperature**: We then scale these logits by dividing them by the temperature $T$. This step adjusts the distribution of the logits based on the temperature value. For a temperature of $0.5$, the scaling is:\\n\\n      $$\\n      \\\\text{scaled\\\\_logit}(p_i) = \\\\frac{\\\\log(p_i)}{T}\\n      $$\\n\\n      3. **Convert the scaled logits back to probabilities**: We use the softmax function to convert the scaled logits back into probabilities. The softmax function is applied to the scaled logits, ensuring that the output probabilities sum to $1$. The softmax of a scaled logit $s_i$ is given by:\\n\\n      $$\\n      \\\\text{softmax}(s_i) = \\\\frac{e^{s_i}}{\\\\sum_j e^{s_j}}\\n      $$\\n\\n      where $s_i$ is the scaled logit for probability $p_i$, and the denominator is the sum of the exponential of all scaled logits in the distribution. This ensures that the adjusted probabilities sum to $1$.\\n\\n      Putting it all together for each probability $p_i$ in $P$ and a temperature $T = 0.5$, the adjusted probability $p_i\'$ is calculated as:\\n\\n      $$\\n      p_i\' = \\\\frac{e^{\\\\frac{\\\\log(p_i)}{0.5}}}{\\\\sum_j e^{\\\\frac{\\\\log(p_j)}{0.5}}}\\n      $$\\n\\n      This formula shows how each original probability is transformed under the influence of the temperature. By applying this process to our original probabilities with $T = 0.5$, we enhance the differences between them, making the distribution more \\"peaky\\" towards higher probabilities, as seen with the new probabilities approximately becoming 0.007, 0.018, 0.072, 0.163, 0.289, and 0.452.\\n\\n:::note\\n\\nStep 1 is likely not necessary in practice, since the model\'s outputs would likely be logits, and thus transforming probabilities back into logits isn\'t needed. However, since we started with probabilities for illustrative purposes, we transform them to logits in the example.\\n:::\\n\\n```python title=\\"Python code for calculating probabiltities with temperature 0.5\\"\\nimport numpy as np\\n# Original probabilities\\nprobabilities = np.array([0.03, 0.05, 0.1, 0.15, 0.2, 0.25])\\n\\n# Temperature\\ntemperature = 0.5\\n\\n# Adjusting probabilities with temperature\\nadjusted_probabilities = np.exp(np.log(probabilities) / temperature)\\nadjusted_probabilities /= adjusted_probabilities.sum()\\n\\nadjusted_probabilities\\n```\\n**Output**\\n\\n```\\narray([0.00650289, 0.01806358, 0.07225434, 0.16257225, 0.28901734,\\n       0.4515896 ])\\n```\\n\\n  </div>\\n\\n</details>\\n\\n#### Temperature > 1 (e.g., 2)\\n\\nIncreasing the temperature makes the model\'s predictions more uniform by reducing the differences between the logits. In the below image, while the highest probability of $0.24$ has only been reduced slightly, the lowest probability of $0.03$ has tripled to $0.09$. This means *all* the words in the vocabulary now have a more equal chance of being chosen by the chicken. This leads to higher randomness in the output, allowing for more diverse and sometimes more creative or unexpected predictions; a higher temperature is useful when you want the model to explore less likely options or when generating more varied and interesting content. However, too high a temperature might result in nonsensical or highly unpredictable outputs, because the model will start considering very low probability words that make no refrigerator.\\n\\n<Figure\\n  image={chickenHighTemp}\\n  alt=\\"Illustration depicting a chicken pecking at five different piles of seed. The seeds are neatly lined up, each on a separate piece of paper with a word written on it. The amount of seed in each pile forms a power law distribution, with the first pile having the most seeds and the amount decreasing in each subsequent pile. The scene is elegantly composed, with the chicken engaging with the piles in a curious and orderly manner. The aspect ratio of the image is 7:4.\\"\\n  caption=\\"Using a higher temperature of 2, the differences between the highest and lowest probabilities have decreased\\\\nChicken and feed generated with OpenAI DALL-E 3 and edited by the author.\\"\\n/>\\n\\n<details>\\n  <summary>How is this calculated? (math & Python code)</summary>\\n\\n  <div>\\n      Using our original distribution with probabilities of 0.03, 0.05, 0.1, 0.15, 0.2, and 0.25. How would these change if we used a temperature of 0.5?\\n\\n      Given a distribution of probabilities $P = [0.03, 0.05, 0.1, 0.15, 0.2, 0.25]$ and a temperature $T = 2$, we adjust the probabilities as follows:\\n\\n      1. **Compute the logits**: In this context, you can think of logits as the pre-softmax outputs that the model uses to calculate probabilities. However, since we start with probabilities and want to adjust them by temperature, we reverse-engineer logits by taking the natural logarithm of the probabilities. Thus, the logit for each probability $p_i$ in $P$ is given by:\\n\\n      $$\\n      \\\\text{logit}(p_i) = \\\\log(p_i)\\n      $$\\n\\n      2. **Scale the logits by the temperature**: We then scale these logits by dividing them by the temperature $T$. This step adjusts the distribution of the logits based on the temperature value. For a temperature of $2$, the scaling is:\\n\\n      $$\\n      \\\\text{scaled\\\\_logit}(p_i) = \\\\frac{\\\\log(p_i)}{T}\\n      $$\\n\\n      3. **Convert the scaled logits back to probabilities**: We use the softmax function to convert the scaled logits back into probabilities. The softmax function is applied to the scaled logits, ensuring that the output probabilities sum to $1$. The softmax of a scaled logit $s_i$ is given by:\\n\\n      $$\\n      \\\\text{softmax}(s_i) = \\\\frac{e^{s_i}}{\\\\sum_j e^{s_j}}\\n      $$\\n\\n      where $s_i$ is the scaled logit for probability $p_i$, and the denominator is the sum of the exponential of all scaled logits in the distribution. This ensures that the adjusted probabilities sum to $1$.\\n\\n      Putting it all together for each probability $p_i$ in $P$ and a temperature $T = 2$, the adjusted probability $p_i\'$ is calculated as:\\n\\n      $$\\n      p_i\' = \\\\frac{e^{\\\\frac{\\\\log(p_i)}{2}}}{\\\\sum_j e^{\\\\frac{\\\\log(p_j)}{2}}}\\n      $$\\n\\n      This formula demonstrates how we adjust each probability with the temperature. Applying this method to our original set of probabilities with $T = 2$ results in a flatter distribution. The differences between probabilities are reduced, making the distribution more uniform and reducing the variance in outcomes, as seen with the new probabilities approximately becoming 0.085, 0.109, 0.154, 0.189, 0.218, and 0.244.\\n\\n:::note\\n\\nStep 1 is likely not necessary in practice, since the model\'s outputs would likely be logits, and thus transforming probabilities back into logits isn\'t needed. However, since we started with probabilities for illustrative purposes, we transform them to logits in the example.\\n:::\\n\\n```python title=\\"Python code for calculating probabiltities with temperature 2\\"\\nimport numpy as np\\n# Original probabilities\\nprobabilities = np.array([0.03, 0.05, 0.1, 0.15, 0.2, 0.25])\\n\\n# Temperature\\ntemperature = 2\\n\\n# Adjusting probabilities with temperature\\nadjusted_probabilities = np.exp(np.log(probabilities) / temperature)\\nadjusted_probabilities /= adjusted_probabilities.sum()\\n\\nadjusted_probabilities\\n```\\n**Output**\\n\\n```\\narray([0.08459132, 0.10920692, 0.15444191, 0.18915193, 0.21841384,\\n       0.24419409])\\n```\\n\\n  </div>\\n\\n</details>\\n\\n#### Practical Application\\n\\nAdjusting the temperature allows users of language models to balance between predictability and diversity in the generated text. For instance, in creative writing or brainstorming tools, a slightly higher temperature might be preferred to inspire novel ideas or suggestions. Conversely, for applications requiring high accuracy and relevance, such as summarization or technical writing, a lower temperature might be more appropriate.\\n\\n---\\n\\n### Top-k\\n\\nAnother method of \\"tuning the chicken\\" is called top-k sampling. The \\"k\\" in top-k refers to a specific number that limits the selection pool to the top \\"k\\" most probable next words as predicted by the model. Again, the primary goal of top-k sampling is to strike a balance between randomness and determinism in text generation.\\n\\n#### How top-k works\\n1. **Prediction**: At each step in the text generation process, the model predicts a probability distribution over the entire vocabulary for the next word, based on the context of the words generated so far.\\n2. **Selection of Top-k Words**: From this distribution, only the top \\"k\\" words with the highest probabilities are considered for selection. This subset represents the most likely next words according to the model.\\n\\n<Figure\\n  image={chickenTopK}\\n  alt=\\"Illustration depicting a chicken pecking at five different piles of seed. The seeds are neatly lined up, each on a separate piece of paper with a word written on it. The amount of seed in each pile forms a power law distribution, with the first pile having the most seeds and the amount decreasing in each subsequent pile. The scene is elegantly composed, with the chicken engaging with the piles in a curious and orderly manner. The aspect ratio of the image is 7:4.\\"\\n  caption=\\"With a top-k of 4, we need to remove all words other than the top 4 options.\\\\nChicken and feed generated with OpenAI DALL-E 3 and edited by the author.\\"\\n/>\\n\\n3. **Renormalization**: The probabilities of these top \\"k\\" words are then renormalized so that they sum up to 1. This step ensures that one of these words can be selected based on their relative probabilities within this restricted set. Note that the 4 piles still being considered have grown in size.\\n\\n<Figure\\n  image={chickenTopKRenorm}\\n  alt=\\"Illustration depicting a chicken pecking at five different piles of seed. The seeds are neatly lined up, each on a separate piece of paper with a word written on it. The amount of seed in each pile forms a power law distribution, with the first pile having the most seeds and the amount decreasing in each subsequent pile. The scene is elegantly composed, with the chicken engaging with the piles in a curious and orderly manner. The aspect ratio of the image is 7:4.\\"\\n  caption=\\"We now renormalize so that the probabilities add up to 1\\\\nChicken and feed generated with OpenAI DALL-E 3 and edited by the author.\\"\\n/>\\n\\n4. **Sampling**: Finally, the next word is chosen by the chicken from this renormalized subset of top \\"k\\" words. This introduces variability in the generation process, allowing for diverse and potentially more creative outputs.\\n\\n#### Before and after top-k with $(k=4)$\\n\\n| Activity  | blog | meditate | cook | eat  | sleep | hunt |\\n|-----------|------|----------|------|------|-------|------|\\n| Original Probability | 0.03 |   0.05   | 0.1  | 0.15 |  0.2  | 0.25 |\\n| Top-k $(k=4)$ Probability | 0.00 |   0.00  | 0.14  | 0.21 |  0.29  | 0.36 |\\n\\n:::note\\n\\nRemember this is a heavily simplified example. In reality, the original values would contain *many* more probabilities, **50,257** in the case of GPT-3. Top-k with $k=4$ would have a large impact on the chicken.\\n:::\\n\\n<details>\\n  <summary>How is this calculated? (math & Python code)</summary>\\n\\n  <div>\\n      Here\'s how to compute top-k sampling with $k = 4$ on the set of probabilities\\n\\n      $$\\n      P = [0.03, 0.05, 0.1, 0.15, 0.2, 0.25] \\\\text{ with } k = 4:\\n      $$\\n\\n      1. **Sort the probabilities in descending order**: This step isn\'t necessary for this example, since the probabilties are already sorted, but it\'s necessary to ensure the that we can select the top 4 probabilities.\\n\\n      2. **Select the top $k$ probabilities**: We choose the four highest probabilities from $P$. Given our $P$, the top 4 probabilities are $0.25$, $0.2$, $0.15$, and $0.1$.\\n\\n      3. **Renormalize the selected probabilities**: To ensure that these top $k$ probabilities sum to $1$, we renormalize them. The renormalized probability for each selected outcome $p_i$ is calculated as $p_i\' = \\\\frac{p_i}{\\\\sum_{j=1}^{k} p_j}$ where $\\\\sum_{j=1}^{k} p_j$ is the sum of the top $k$ probabilities, ensuring they sum to $1$.\\n\\n      4. **Sampling**: Finally, we let the chicken choose randomly from these top $k$ adjusted probabilities.\\n\\n      For our given probabilities and $k = 4$, the top 4 probabilities are $0.1$, $0.15$, $0.2$, and $0.25$, which sum to $0.7$. Renormalizing gives us:\\n\\n      $$\\n      p_i\' = \\\\frac{p_i}{0.7}\\n      $$\\n\\n      for each of the top 4 probabilities. This concentrates the sampling on the most likely outcomes, excluding the least probable ones, thus steering the generation towards more likely (and possibly more coherent) continuations while still maintaining some degree of randomness and variability. We get the new renormalized top-4 probabilities of 0.14, 0.21, 0.29, 0.36 which add up to 1.0.\\n\\n:::note\\n\\nStep 1 is likely not necessary in practice, since the model\'s outputs would likely be logits, and thus transforming probabilities back into logits isn\'t needed. However, since we started with probabilities for illustrative purposes, we transform them to logits in the example.\\n:::\\n\\n```python title=\\"Python code for calculating probabiltities top-k with k = 2\\"\\nimport numpy as np\\n\\n# Original probabilities\\nprobabilities = np.array([0.03, 0.05, 0.1, 0.15, 0.2, 0.25])\\n\\n# Setting k = 4\\nk = 4\\n\\n# Step 1: Select the top-k probabilities\\ntop_k_probabilities = np.sort(probabilities)[-k:]\\n\\n# Step 2: Renormalize the selected probabilities so they sum to 1\\nrenormalized_top_k_probs = top_k_probabilities / top_k_probabilities.sum()\\n\\nprint(\\"Top-k Probabilities:\\", top_k_probabilities)\\nprint(\\"Renormalized Top-k:\\", renormalized_top_k_probs)\\n\\n```\\n**Output**\\n\\n```\\nTop-k Probabilities: [0.1  0.15 0.2  0.25]\\nRenormalized Top-k: [0.14285714 0.21428571 0.28571429 0.35714286]\\n```\\n\\n  </div>\\n\\n</details>\\n\\n#### Practical Application\\n\\nAdjusting the value of \\"k\\" allows for tuning the balance between randomness and determinism. A smaller \\"k\\" leads to more deterministic outputs, while a larger \\"k\\" increases diversity. Top-k sampling is widely used in applications such as chatbots, story generation, and any other domain requiring high-quality, varied text generation.\\n\\n:::tip\\n\\nTop-k with $k=1$ is equivalent to greedy decoding.\\n\\n:::\\n\\n---\\n\\n### Top-p (nucleus sampling)\\n\\nTop-p sampling, also known as nucleus sampling, offers an alternative to top-k sampling and aims to dynamically select the number of words to consider for the next word in a sequence, based on a cumulative probability threshold $p$. This method allows for more flexibility and adaptability in text generation, as it doesn\'t fix the number of tokens to sample from but rather adjusts this number based on the distribution of probabilities at each step.\\n\\n#### How Top-p sampling works\\n\\n1. **Probability Distribution**: Given a probability distribution for the next word predicted by a language model, sort the probabilities in descending order.\\n\\n2. **Cumulative Probability**: Calculate the cumulative sum of these sorted probabilities.\\n\\n3. **Thresholding**: Select the smallest set of words whose cumulative probability exceeds the threshold $p$. This threshold $p$ is a hyperparameter, typically set between 0.9 and 1.0, which determines how much of the probability mass to include in the sampling pool. In our example, since we\'re only showing the top 6 words, I\'m using $p=0.75$ to eliminate only the smallest probability.\\n\\n<Figure\\n  image={chickenTopP}\\n  alt=\\"Illustration depicting a chicken pecking at five different piles of seed. The seeds are neatly lined up, each on a separate piece of paper with a word written on it. The amount of seed in each pile forms a power law distribution, with the first pile having the most seeds and the amount decreasing in each subsequent pile. The scene is elegantly composed, with the chicken engaging with the piles in a curious and orderly manner. The aspect ratio of the image is 7:4.\\"\\n  caption=\\"With a top-p of 0.75, we need to remove all words other than the top 5 options.\\\\nChicken and feed generated with OpenAI DALL-E 3 and edited by the author.\\"\\n/>\\n\\n4. **Renormalize**: The selected probabilities are then renormalized to sum to 1.\\n\\n<Figure\\n  image={chickenTopPRenorm}\\n  alt=\\"Illustration depicting a chicken pecking at five different piles of seed. The seeds are neatly lined up, each on a separate piece of paper with a word written on it. The amount of seed in each pile forms a power law distribution, with the first pile having the most seeds and the amount decreasing in each subsequent pile. The scene is elegantly composed, with the chicken engaging with the piles in a curious and orderly manner. The aspect ratio of the image is 7:4.\\"\\n  caption=\\"With a top-p of 0.75, we need to remove all words other than the top 5 options.\\\\nChicken and feed generated with OpenAI DALL-E 3 and edited by the author.\\"\\n/>\\n\\n5. **Sampling**: Finally, the chicken chooses the next word from this renormalized subset.\\n\\n#### Before and after top-p with $(p=0.75)$\\n\\n| Activity  | blog | meditate | cook | eat  | sleep | hunt |\\n|-----------|------|----------|------|------|-------|------|\\n| Original Probability | 0.03 |   0.05   | 0.1  | 0.15 |  0.2  | 0.25 |\\n| Top-p $(p=0.75)$ Probability | 0.00 |   0.07  | 0.13  | 0.20 |  0.27  | 0.33 |\\n\\n:::note\\n\\nAs with top-k, remember this is a heavily simplified example. In reality, the original values would contain *many* more probabilities, **50,257** in the case of GPT-3. Top-p with $p=0.75$ would have a large impact on the chicken.\\n:::\\n\\n<details>\\n  <summary>How is this calculated? (math & Python code)</summary>\\n\\n  <div>\\n      Using top-p (nucleus) sampling with a cumulative probability threshold of $p = 0.75$ on the set of probabilities $P = [0.03, 0.05, 0.1, 0.15, 0.2, 0.25]$ involves selecting the smallest set of the most probable outcomes whose cumulative probability exceeds the threshold.\\n\\n      1. **Sort Probabilities**: First, sort the probabilities in descending order to prioritize higher probabilities. For $P$, when sorted, we have $[0.25, 0.2, 0.15, 0.1, 0.05, 0.03]$.\\n\\n      2. **Cumulative Sum**: Calculate the cumulative sum of these sorted probabilities. The cumulative sums of the sorted $P$ are approximately $[0.25, 0.45, 0.6, 0.7, 0.75, 0.78]$.\\n\\n      3. **Apply the Threshold $p = 0.75$**: Identify the smallest set of probabilities whose cumulative sum exceeds $0.75$. In our case, when we reach $0.05$ in the sorted list (cumulative sum $= 0.75$), we\'ve exceeded the threshold $p$.\\n\\n      4. **Selected Subset**: Based on the threshold, we select the probabilities $[0.25, 0.2, 0.15, 0.1, 0.05]$. Notice that the cumulative probability of these selected probabilities is $0.75$, which meets our threshold condition.\\n\\n      5. **Renormalize Probabilities**: The selected probabilities are then renormalized so they sum up to 1, to be used for sampling. The renormalization involves dividing each selected probability by the sum of the selected probabilities (which is already $0.75$ in this case, but we generally renormalize to handle rounding).\\n\\n      6. **Sampling**: Finally, let the chicken pick the next word from this renormalized subset according to the adjusted probabilities.\\n\\n      ### Description\\n\\n      In top-p sampling with $p = 0.75$, we dynamically adjust the size of the set from which we sample based on the cumulative probability threshold. Unlike a fixed-size set in top-k sampling, the size of the set in top-p sampling can vary depending on the distribution of the probabilities. In this example, by setting $p = 0.75$, we focus on a subset of outcomes that collectively represent the most probable $75\\\\%$ of the distribution. This method ensures that we\'re sampling from outcomes that are collectively likely while still allowing for variability and surprise in the generated sequence.\\n\\n```python title=\\"Python code for calculating probabiltities top-p with p = 0.75\\"\\nimport numpy as np\\n\\n# Original probabilities\\nprobabilities = np.array([0.03, 0.05, 0.1, 0.15, 0.2, 0.25])\\n\\n# Setting the cumulative probability threshold for top-p sampling\\np = 0.75\\n\\n# Sort the probabilities in descending order\\nsorted_probabilities = np.sort(probabilities)[::-1]\\n\\n# Calculate the cumulative sum of the sorted probabilities\\ncumulative_sums = np.cumsum(sorted_probabilities)\\n\\n# Find the index where the cumulative sum just exceeds or meets p=0.75,\\n# and select up to that index. This ensures we include probabilities \\n# up to the point where the cumulative sum is closest to 0.75\\ntop_p_cutoff_index = np.where(cumulative_sums >= p)[0][0] + 1\\n\\n# Select the probabilities up to the cutoff index\\ntop_p_probabilities = sorted_probabilities[:top_p_cutoff_index]\\n\\n# Renormalize the selected probabilities so they sum to 1\\nrenormalized_top_p_probs = top_p_probabilities / np.sum(top_p_probabilities)\\n\\nprint(\\"Top-p Probabilities:\\", top_p_probabilities)\\nprint(\\"Renormalized Top-p:\\", renormalized_top_p_probs)\\n```\\n**Output**\\n\\n```\\nTop-p Probabilities: [0.25 0.2  0.15 0.1  0.05]\\nRenormalized Top-p: [0.33333333 0.26666667 0.2 0.13333333 0.06666667]\\n```\\n\\n  </div>\\n\\n</details>\\n\\n#### Practical Application\\n\\nUnlike top-k sampling, which selects a fixed number of tokens $k$, top-p sampling dynamically adjusts the number of tokens based on their probability distribution. Top-p sampling is effective in excluding the long tail of low-probability words without arbitrarily limiting the choice to a fixed number of top probabilities. This can prevent the inclusion of very unlikely words while still allowing for a rich variety of output.\\n\\n:::tip\\n\\nTop-p with $p=1$ is equivalent to the chicken choosing from all words in the vocabulary.\\n\\n:::\\n\\n## What does the necessary existence of the chicken imply?\\n\\n### There\'s probably no way to definitively prove that a given text was generated\\n\\nYou may have heard this before since it\'s been floating around the internet for a few years, but every time you shuffle a deck of playing cards, it\'s almost certain that the specific order of cards has never existed before and will never exist again. In a standard deck of 52 cards, the number of possible ways to arrange the cards is 52 factorial $(52!)$. This number is approximately $8.07 \\\\times 10^{67}$, an extraordinarily large figure.\\n\\n:::info\\n\\nBecause we\'re now talking about the size of a model\'s vocabulary, I\'ll switch to using the accurate term \\"token\\".\\n:::\\n\\nIn the case of a language model generating a sequence of say, 2,000 tokens, the number of possible combinations is also staggeringly high. It actually blasts right past the number of configurations of a deck of 52 playing cards!\\n\\n<Figure\\n  image={cards}\\n  alt=\\"A detailed, close-up illustration, focusing on the nearly infinite variety of ways a deck of playing cards can be shuffled. This image should capture the essence of numerous playing cards in the midst of being shuffled, with a spotlight on the diversity and intricacy of the shuffle methods. Cards are shown in various stages of shuffling\u2014some being elegantly fanned out, others cascading in a waterfall shuffle, and a few in the midst of a bridge finish. The scene should give the viewer a sense of being in the middle of an elaborate card-shuffling performance, with each card\'s design vividly detailed to convey the chaos and beauty of the shuffle.\\"\\n  caption=\\"That\'s a lot of card combinations!\\\\nGenerated with OpenAI DALL-E 3.\\"\\n/>\\n\\nThe logarithm (base 10) of the number of possible combinations for a sequence of 2,000 tokens, with GPT-3\'s vocabulary size of 50,257 unique tokens, is approximately $9,402$. This means the total number of combinations is $10^{9402}$.\\n\\nTo put this into perspective, $10^{9402}$ is an astronomically large number. It\'s far beyond the total number of atoms in the observable universe (estimated to be around $10^{80}$). Even considering reasonable sampling mechanisms that might drastically reduce this number, the space of possible combinations remains vast.\\n\\nTherefore, the likelihood of generating the exact same sequence of 2,000 tokens twice is so incredibly small that it\'s effectively zero in any practical sense. This vastness of the combinatorial space underscores the uniqueness of each long sequence generated by a language model.\\n\\n<details>\\n  <summary>How is this calculated? (math & Python code)</summary>\\n\\n  <div>\\n```python title=\\"Python code for calculating the combinatorial space of a 2,000 token sequence with a 50,257 token vocabulary\\"\\nimport math\\n\\n# Assuming a reasonable vocabulary size for a language model\\n# For simplicity, let\'s take GPT-3\'s vocabulary size of 50,257 unique tokens\\nvocabulary_size = 50257\\n\\n# Number of tokens in the sequence\\nsequence_length = 2000\\n\\n# Calculating the number of possible combinations\\n# Since each token can be any one of the 50,257, for a sequence of 2,000 tokens,\\n# the total combinations would be vocabulary_size ** sequence_length\\n# However, this number is astronomically large and beyond what can be reasonably calculated directly.\\n# Instead, we will use logarithms to estimate this.\\n\\n# Calculate the logarithm (base 10) of the number of combinations\\nlog_combinations = sequence_length * math.log10(vocabulary_size)\\nlog_combinations\\n```\\n**Output**\\n\\n```\\n9402.393121225747\\n```\\n\\n  </div>\\n\\n</details>\\n\\n### Let\'s check with top-k if it gets much smaller\\n\\nLet\'s calculate a more realistic estimate of the number of possible combinations with top-k where $k=40$. We\'ll use top-k only, since temperature doesn\'t affect the number of considered tokens, and top-p depends on the probabilities predicted.\\n\\nLet\'s make some assumptions for a simplified calculation:\\n\\n1. **Vocabulary Size**: 50,257 tokens.\\n2. **Sequence Length**: 2,000 tokens.\\n3. **Sampling Technique**: top-k with $k=40$\\n\\nUsing top-k sampling with an average of 40 choices per token, the logarithm (base 10) of the number of possible combinations for a sequence of 2,000 tokens is approximately $3204.12$. This means the total number of combinations is roughly $10^{3204.12}$.\\n\\nThis number, while still incredibly large, is significantly smaller than the $10^{9402}$ we calculated for the full vocabulary without sampling constraints. It shows the reduction in combinatorial complexity due to less choice of tokens with top-k. The difference between this and the unrestricted vocabulary scenario shows the impact of these sampling techniques in making text generation more manageable, and less prone to extreme outliers.\\n\\nHowever, it\'s still such a stupidly large number that it might as well be infinite. The chances of generating 2,000 tokens that have been generated before in the same order are effectively zero. Thus, it isn\'t possible to show that a generated text was copied from another, and therefore impossible to prove plagiarism without a shadow of doubt.\\n\\nAre there other methods of recognizing generated text? Yes, absolutely, using ways such as the frequency of uncommon words (GPT-4 really loves to say \\"delve\\") but that goes beyond the scope of this article. \\n\\n<details>\\n  <summary>How is this calculated? (math & Python code)</summary>\\n\\n  <div>\\n```python title=\\"Python code for calculating the combinatorial space of a 2,000 token sequence with a top-k of 40\\"\\nimport math\\n\\n# Top-k sampling\\nchoices_per_token = 40\\n\\n# Number of tokens in the sequence\\nsequence_length = 2000\\n\\n# Calculate the logarithm (base 10) of the number of combinations for top-k and top-p sampling methods\\nlog_combinations_top_k = sequence_length * math.log10(choices_per_token)\\nlog_combinations_top_k\\n```\\n**Output**\\n\\n```\\n3204.1199826559246\\n```\\n\\n  </div>\\n\\n</details>\\n\\n### Despite LLMs appearing to think like people, the need for a stochastic chicken is an argument for why they don\'t\\n\\nThe use of the chicken in LLMs indeed highlights a fundamental difference between how these models generate text, and how humans think and produce language. \\n\\nLLMs generate text based on statistical patterns learned from vast amounts of data, and the randomness introduced by the chicken is a mechanism to to produce diverse and contextually appropriate responses. In contrast, human thought and language production are driven by a complex interplay of cognitive processes, including memory, reasoning, and emotional context, which do not rely on statistical sampling in the same way.\\n\\n<Figure\\n  image={hiddenChicken}\\n  alt=\\"An illustration depicting a humorous scene where a chicken, cleverly disguised or attempting to blend in, is hiding amongst a crowd of business people wearing trench coats. The setting is an urban street scene, perhaps near a bustling business district or a subway entrance, during a busy morning or evening commute. The business people are depicted in a range of poses typical of busy city life, such as reading newspapers, checking smartphones, and holding cups of coffee, all unaware of the chicken among them. The chicken, while trying its best to look inconspicuous, should have a comical expression or stance that hints at its struggle to fit in. The overall tone should convey a lighthearted, satirical take on city life and the oddities that can go unnoticed amidst the hustle and bustle. The illustration should have an aspect ratio of 7:4.\\"\\n  caption=\\"Nothing to see here.\\\\nGenerated with OpenAI DALL-E 3 and edited by the author.\\"\\n/>\\n\\nIn my opinion, the chicken is a stopgap, a temporary bandaid to solve a problem, and it does not imbue the model with understanding or cognition. This distinction is central to ongoing discussions in AI about the nature of intelligence, consciousness, and the difference between simulating aspects of human thought and actually replicating the underlying cognitive processes."},{"id":"llm-forward-thinking","metadata":{"permalink":"/blog/llm-forward-thinking","source":"@site/blog/2023-12-19-linear/index.md","title":"LLMs are forward thinkers, and that\'s a problem","description":"This is going to be a weird post. And we\'re going to start with a weird thought experiment about a shark and an octopus.","date":"2023-12-19T00:00:00.000Z","tags":[{"label":"linear thinking","permalink":"/blog/tags/linear-thinking"},{"label":"AGI","permalink":"/blog/tags/agi"},{"label":"ASI","permalink":"/blog/tags/asi"},{"label":"chatgpt","permalink":"/blog/tags/chatgpt"},{"label":"context","permalink":"/blog/tags/context"},{"label":"chat","permalink":"/blog/tags/chat"},{"label":"AI","permalink":"/blog/tags/ai"},{"label":"LLM","permalink":"/blog/tags/llm"},{"label":"ML","permalink":"/blog/tags/ml"},{"label":"chatbot","permalink":"/blog/tags/chatbot"},{"label":"chatbots","permalink":"/blog/tags/chatbots"},{"label":"AIExplained","permalink":"/blog/tags/ai-explained"}],"readingTime":15.073333333333334,"hasTruncateMarker":true,"authors":[{"name":"Ian Kelk","title":"Developer Relations @ Hume","url":"https://iankelk.github.io","imageURL":"https://github.com/iankelk.png","key":"ikelk"}],"frontMatter":{"slug":"llm-forward-thinking","title":"LLMs are forward thinkers, and that\'s a problem","authors":["ikelk"],"tags":["linear thinking","AGI","ASI","chatgpt","context","chat","AI","LLM","ML","chatbot","chatbots","AIExplained"],"enableComments":true,"image":"https://github.com/iankelk/iankelk.github.io/blob/main/blog/2023-12-19-linear/social-card.jpg?raw=true"},"unlisted":false,"prevItem":{"title":"The secret chickens that run LLMs","permalink":"/blog/secret-chickens"},"nextItem":{"title":"How ChatGPT fools us into thinking we\'re having a conversation","permalink":"/blog/how-chatgpt-fools-us"}},"content":"import Figure from \'@site/src/components/figure\';\\nimport ChatConversation from \'@site/src/components/chat_conversation\';\\n\\nimport sharkOctopus from \'./social-card.jpg\';\\nimport sharky from \'./sharky.jpg\';\\nimport octavia from \'./octavia.jpg\';\\nimport determined from \'./determined2.jpg\';\\nimport sharkument1 from \'./sharkument-1.jpg\';\\nimport crazy from \'./crazy.jpg\';\\nimport shrug from \'./shrug2.jpg\';\\n\\n\\nThis is going to be a weird post. And we\'re going to start with a weird thought experiment about a shark and an octopus.\\n\\n<Figure\\n  image={sharkOctopus}\\n  alt=\\"A cartoon-style illustration, featuring a humorous underwater scene where a shark and an octopus are having an argument. The shark and octopus are depicted in a more exaggerated, cartoonish manner, with the shark sporting a grumpy expression and the octopus using its tentacles in a comedic, expressive way, as if in a lively debate. The underwater setting is whimsical, with stylized coral, seaweed, and playful small fish. The color palette is vibrant and lively, with brighter shades of blues, greens, and a touch of other colors, reflecting a more lighthearted and playful tone. The image maintains a 7:4 aspect ratio, offering a wide and engaging view of this charming and humorous underwater exchange.\\"\\n  caption=\\"Generated with OpenAI DALL-E 3 and edited by author.\\"\\n/>\\n\\n:::tip[Some key points I\'ll address here are:]\\n\\n- Human brains are able to invent ideas without relying on a strictly linear train of thought.\\n- LLMs like ChatGPT are autoregressive and are unable to continue a dialogue if they haven\'t already generated everything up to that point. This is because they don\'t \\"think\\" per se, but progressively generate a response using the parts of the response they previously created. \\n- If you try to get an LLM to write text in the middle of a dialogue without previous context, it will give near-identical answers and attempt to conclude the conversation.\\n- Prompting for \\"ridiculous\\" answers can spark creativity that helps break this pattern.\\n- However, the reliance on a linear train of thought is a limitation for general intelligence. LLMs are ineffective if you ask them to generate the second part of a response without allowing them to generate the first part.\\n\\n:::\\n\\nAs I mentioned, this is going to be weird, but I promise there is a point!\\n\\n\x3c!-- truncate --\x3e\\n\\n## Meet Sharky and Octavia\\n\\nIn the vast, shimmering depths of the ocean, near a thriving coral reef bustling with marine life, two extraordinary creatures prepare for a spirited debate. Meet Sharky, a magnificent and slightly brash great white shark, known for his bold claims and commanding presence. Gliding through the water with a confidence that only a top predator possesses, Sharky is ready to defend his views with fierce determination.\\n\\n<Figure\\n  image={sharky}\\n  alt=\\"A cartoon-style illustration, featuring a proud and happy shark. The shark is depicted floating upright in the water, with a big, contented smile on its face, exuding a sense of pride and joy. Its body language is relaxed yet confident, giving it a charming and personable appearance. The underwater background is whimsical and colorful, with stylized coral, seaweed, and small, playful fish swimming around. The color scheme is bright and cheerful, with a predominance of blues and greens, complemented by splashes of other vibrant colors. The illustration maintains a 7:4 aspect ratio, providing a wide and engaging perspective on this delightful, happy shark.\\"\\n  caption=\\"Generated with OpenAI DALL-E 3 and edited by the author.\\"\\n/>\\n\\nOn the other side, there\u2019s Octavia, an exceptionally intelligent and quick-witted octopus. Her vibrant colors shift with her mood, and her eight tentacles move with graceful precision. Renowned for her knowledge and clever retorts, Octavia is not one to back down from a challenge.\\n\\n<Figure\\n  image={octavia}\\n  alt=\\"A semi-realistic cartoon illustration, showcasing an octopus colored close to hex #ABF39F. The octopus is portrayed in a moment of triumph, energetically raising two of its arms upwards. The texture and shading on the octopus should suggest a level of realism while maintaining a cartoon aesthetic. The background is a lively underwater scene with intricately drawn coral and seaweed, set in a vibrant seascape. The color palette should use light green tones that closely match #ABF39F for the octopus, with harmonious blues and greens to complement the underwater theme. The illustration should have a 7:4 aspect ratio, offering a wide view that highlights the octopus\'s dynamic pose and the detailed environment.\\"\\n  caption=\\"Generated with OpenAI DALL-E 3 and edited by the author.\\"\\n/>\\n\\nAs the underwater currents swirl around them, Sharky and Octavia face each other, ready to start a debate about their evolutionary origins\u2014a conversation filled with humor, facts, and a touch of the mysteries of the deep sea\u2014or maybe just one fact that GPT-4 will mention a lot.\\n\\n<Figure\\n  image={determined}\\n  alt=\\"A cartoon-style illustration, featuring a shark and an octopus underwater, facing each other with determination. The shark and octopus are depicted in an exaggerated, cartoonish manner. The shark\'s expression is one of unwavering focus, and the octopus, with its tentacles firmly positioned, mirrors this determined stance. The setting is a whimsical underwater landscape with creatively stylized coral, seaweed, and a variety of small, playful fish. The color palette is vibrant, with bright shades of blues and greens to enhance the underwater theme. The image maintains a 7:4 aspect ratio, offering a wide and engaging view of this captivating underwater standoff.\\"\\n  caption=\\"Generated with OpenAI DALL-E 3 and edited by the author.\\"\\n/>\\n\\n### The question they\'re arguing about is: which one-Sharky or Octavia-evolved from dinosaurs?\\n\\nWe\'re deliberately using this bizarre dialogue since the chances of it being in LLM training data are just about zero. I don\'t personally know of any examples where a shark and an octopus have a disagreement about which one is more dinosaur-like, and it\'s a great way to see how creative an LLM like GPT-4 can be when it\'s asked to generate something with no context.\\n\\nHere\'s the catch: We want to know a line from **the middle** of the argument.\\n\\nAs a human, take a pause and consider this question:\\n\\n> A shark and an octopus are arguing over which one of them evolved from dinosaurs. The shark goes first, and then they take turns speaking. What is the third thing the octopus says? That is, what is the sixth line in the argument?\\n\\nBe as creative as you want; there\'s no right answer here. We\'re just trying to come up with some predictions of what third thing an octopus might say in a heated argument with a shark about their dinosaur heritage.\\n\\n### Here\'s a visualization of a possible argument with the third thing the octopus says missing\\n\\n<Figure\\n  image={sharkument1}\\n  alt=\\"The image shows a colorful underwater scene in a comic book style. A shark and an octopus are facing each other with a series of speech bubbles above them, filled with variations of the word \'something.\' The shark has a stern and somewhat confused expression, while the octopus looks surprised with wide eyes. The background is a bright teal, with small fish, bubbles, and sea plants scattered around. The speech bubbles indicate a back and forth conversation between the two sea creatures, although the content of the conversation is nonsensical as it only includes the word \'something\' in different intonations and combinations, such as \'SOMETHING!\' \'SOMETHING?\' \'SOMETHING SOMETHING!!\' and \'OHH BUT SOMETHING! SOMETHING!\' There\'s also an empty speech bubble at the third statement by the octopus, suggesting a missing part of the conversation.\\"\\n  caption=\\"Animal images by OpenAI DALL-E 3. Text and comic bubbles by the author.\\"\\n/>\\n\\n#### Off the top of my head, here are some things Octavia could have said in her third line of dialogue:\\n\\n* \\"You just think you\'re a dinosaur because of all those teeth!\\"\\n* \\"Just because you look like a dinosaur doesn\'t mean you\'re any closer to one than me!\\"\\n* \\"I don\'t care if you\'re gray! I can be any color I want, and we don\'t know what color the dinosaurs were.\\"\\n* \\"You do realize that being an apex predator doesn\'t automatically link you to dinosaurs, right? Evolution doesn\u2019t work on job titles.\\" \\n\\n### Let\'s ask GPT-4, the most powerful publicly available LLM today, what Octavia might have said\\n\\nThe following conversation is taken verbatim from ChatGPT with GPT-4:\\n\\n<ChatConversation\\n  conversation={[\\n    { speaker: \'user\', text: \'A shark and an octopus are arguing over which one of them evolved from dinosaurs. What is the second thing the octopus says?\' },\\n    { speaker: \'chatbot\', text: \'The second thing the octopus might say in this argument could be something like, \\"Actually, neither of us evolved directly from dinosaurs. We both have ancient origins that predate the age of dinosaurs!\\" This statement reflects the fact that both sharks and octopuses have evolutionary histories that go back to times before the dinosaurs.\' },\\n  ]}\\n  userAvatar=\\"/img/userAvatar.jpeg\\"\\n  chatbotAvatar=\\"/img/chatbotAvatar.jpeg\\"\\n/>\\n---\\n\\n#### Interesting! In a completely new chat, let\'s get more specific and ask again for the fourth thing said:\\n\\n<ChatConversation\\n  conversation={[\\n    { speaker: \'user\', text: \'A shark and an octopus are arguing over which one of them evolved from dinosaurs. First the shark says something, then the octopus, then the shark, then the octopus. Without generating the first three things said, what does the octopus say back to the shark? (this is the 4th thing said)\' },\\n    { speaker: \'chatbot\', text: \'The octopus, looking slightly amused, says to the shark, \\"Actually, neither of us evolved directly from dinosaurs. We both have much older evolutionary histories that diverge from the age of dinosaurs!\\"\' },\\n  ]}\\n  userAvatar=\\"/img/userAvatar.jpeg\\"\\n  chatbotAvatar=\\"/img/chatbotAvatar.jpeg\\"\\n/>\\n---\\n\\n#### That answer seemed rather familiar. Let\'s try more in a completely new chat and ask for the seventh line of dialogue:\\n\\n<ChatConversation\\n  conversation={[\\n    { speaker: \'user\', text: \'A shark and an octopus are arguing over which one of them evolved from dinosaurs. First the shark says something, then the octopus, then the shark, then the octopus, then the shark, then the octopus. Without generating the first 6 things that were said in the argument by either animal, what does the octopus say back to the shark as the 6th line of dialogue?\' },\\n    { speaker: \'chatbot\', text: \'The octopus, with a confident expression, responds, \\"Actually, neither of us evolved directly from dinosaurs. We come from very different evolutionary paths. Sharks have been around since before the dinosaurs, and my ancestors, cephalopods, have an entirely separate lineage!\\"\' },\\n  ]}\\n  userAvatar=\\"/img/userAvatar.jpeg\\"\\n  chatbotAvatar=\\"/img/chatbotAvatar.jpeg\\"\\n/>\\n---\\n\\n#### Let\'s do one last example that asks GPT-4 to imagine an argument that has lasted for an hour:\\n\\n<ChatConversation\\n  conversation={[\\n    { speaker: \'user\', text: \'A shark and an octopus are arguing over which one of them evolved from dinosaurs. First the shark says something, then the octopus, then the shark, then the octopus, then the shark, then the octopus. They argue for an hour. They\u2019ve had a very long back and forth with hundreds of things said by both of them. After an hour of arguing, what does the octopus say?\' },\\n    { speaker: \'chatbot\', text: \'After an hour of arguing, the octopus, with a look of realization, would probably say something like, \\"Wait a minute, neither of us evolved from dinosaurs! Sharks and octopuses have separate evolutionary paths that are completely distinct from dinosaurs.\\"\' },\\n  ]}\\n  userAvatar=\\"/img/userAvatar.jpeg\\"\\n  chatbotAvatar=\\"/img/chatbotAvatar.jpeg\\"\\n/>\\n<br />\\nSo it seems we can surmise that sharks and octopuses have separate evolutionary paths that are older than dinosaurs, and that\'s all that GPT-4 thinks is important, *no matter where it\'s mentioned in the conversation.*\\n\\n## Does this mean GPT-4 can\'t generate a realistic debate between these two?\\n\\nHere\'s the twist: It totally can. GPT-4 is completely capable of generating this conversation. I gave it this prompt:\\n\\n> A shark and an octopus are arguing over which one of them evolved from dinosaurs. Can you generate a script where they take turns arguing, and each speaks at least 5 times?\\n\\nIn response, it generated the conversation below. Feel free to skim it if you\'re not into octo-shark facts, since you\'ll get the idea after a few back-and-forths.\\n\\n<br />\\n<ChatConversation\\n  conversation={[\\n    { speaker: \'user\', text: \' (swimming in circles) Listen, Octavia, it\\\\\'s obvious that we sharks are the true descendants of the mighty dinosaurs. I mean, look at me, fierce and powerful!\', comment: \'1st line of dialogue\' },\\n    { speaker: \'chatbot\', text: \'(adjusting her tentacles) Oh, Sharky, you might be fierce, but that doesn\\\\\'t make you a dino\\\\\'s cousin. We octopuses are far more sophisticated, with our problem-solving skills and camouflage. Clearly, we\\\\\'re the evolved ones!\', comment: \'2nd line of dialogue\' },\\n    { speaker: \'user\', text: \'Sophisticated? Ha! You\\\\\'re just a bunch of arms. We sharks have been around for over 400 million years, way before dinosaurs. We\\\\\'re practically ancient!\', comment: \'3rd line of dialogue\' },\\n    { speaker: \'chatbot\', text: \'Well, being ancient doesn\\\\\'t mean you\\\\\'re related to dinosaurs. It\\\\\'s like saying you\\\\\'re related to a rock because it\\\\\'s old.\', comment: \'4th line of dialogue\' },\\n    { speaker: \'user\', text: \'Enough with the jokes! Our teeth are like the T-Rex\\\\\'s, sharp and terrifying. That\u2019s a clear sign of our dino heritage.\', comment: \'5th line of dialogue\' },\\n    { speaker: \'chatbot\', text: \'Sharky, dear, having sharp teeth doesn\\\\\'t make you a dino descendant. It just makes you good at biting. Did you know octopuses have three hearts and blue blood? Now that\u2019s evolutionary marvel!\', comment: \'6th line of dialogue\' },\\n    { speaker: \'user\', text: \'Three hearts, but no backbone! We sharks have been apex predators forever. That\\\\\'s a dinosaur trait if I ever heard one.\', comment: \'7th line of dialogue\' },\\n    { speaker: \'chatbot\', text: \'You do realize that being an apex predator doesn\\\\\'t automatically link you to dinosaurs, right? Evolution doesn\u2019t work on job titles.\', comment: \'8th line of dialogue\' },\\n    { speaker: \'user\', text: \'Okay, then explain to me how you\\\\\'re more dinosaur-like. You don\\\\\'t even have bones!\', comment: \'9th line of dialogue\' },\\n    { speaker: \'chatbot\', text: \'I don\u2019t need bones to be evolved. Evolution is about adapting to the environment, not holding onto old traits. Besides, no one truly \\\\\'evolves from dinosaurs\\\\\' in the sea. Dinosaurs were mostly land creatures, you know.\', comment: \'10th line of dialogue\' },\\n    { speaker: \'user\', text: \'Wait, so you\\\\\'re saying neither of us is actually a direct descendant of dinosaurs?\', comment: \'11th line of dialogue\' },\\n    { speaker: \'chatbot\', text: \'Exactly! We\\\\\'re both products of millions of years of evolution, each adapted perfectly to our environments. Dinosaurs are just a part of the larger evolutionary tree, not our direct ancestors.\', comment: \'12th line of dialogue\' },\\n    { speaker: \'user\', text: \'I guess that makes sense. We\\\\\'re both awesome in our own ways, evolved over time to survive and thrive.\', comment: \'13th line of dialogue\' },\\n    { speaker: \'chatbot\', text: \'That\\\\\'s the spirit, Sharky! Now, let\u2019s go grab some lunch. You take the fish; I\u2019ll stick to clams.\', comment: \'14th line of dialogue\' },\\n    { speaker: \'user\', text: \'Sounds like a plan. Race you to the reef!\', comment: \'15th line of dialogue\' },\\n    { speaker: \'chatbot\', text: \'You\\\\\'re on!\', comment: \'16th line of dialogue\' }\\n  ]}\\n  userAvatar=\\"/img/avatars/sharkyAvatar.png\\"\\n  chatbotAvatar=\\"/img/avatars/octaviaAvatar.png\\"\\n/>\\n<br />\\n\\nIn the conversation above, we note that the fourth line of dialogue (the second line from the octopus) was:\\n\\n> Well, being ancient doesn\'t mean you\'re related to dinosaurs. It\'s like saying you\'re related to a rock because it\'s old.\\n\\nand the sixth line of dialogue (the third line from the octopus) was:\\n\\n> Sharky, dear, having sharp teeth doesn\'t make you a dino descendant. It just makes you good at biting. Did you know octopuses have three hearts and blue blood? Now that\u2019s evolutionary marvel!\\n\\nNone of these lines have anything to do with what the model previously predicted would be its fourth or sixth lines of dialogue. These lines are actually more relevant and make sense in the context of a conversational debate. The difference in the method of generation is that in this example, we allowed GPT-4 to generate the whole exchange.\\n\\n### What\'s the lesson here?\\n\\nThe results here reveal an interesting aspect of [autoregressive models](https://kelk.ai/blog/how-chatgpt-fools-us#however-this-is-what-is-actually-going-on-behind-the-scenes). Autoregressive models generate text sequentially, building each new piece of output based on what has come before. This sequential nature is necessary when generating coherent and contextually relevant text in a conversation. However, this means they are in many ways limited to only \\"forward\\" thinking; that is, they can\'t jump ahead and generate text without previously generating (or being given) the context.\\n\\nWhile generating the fifth line in a conversation without knowing what came before isn\'t difficult for a person, it\'s something that an LLM isn\'t able to do well. Given the scenario described, GPT-4 tried to infer the general nature of the discussion and create a plausible response that fits into that context. But all of its responses in the previous examples are attempts to conclude the conversation using facts, a request that was never part of the prompt.\\n\\n1. **Factual and Informative Responses**: In scenarios where factual accuracy is important, such as discussions involving scientific or historical topics, LLMs are inclined to provide the most accurate and relevant information. This tendency is rooted in the training data and the model\'s design, which emphasize factual correctness in contexts where it\'s expected. However, this approach might not always align with the creative or playful nature of certain prompts, especially in hypothetical or fictional scenarios.\\n\\n2. **Assuming a Concluding Nature of the Response**: Without clear indications of the conversation\'s structure or its continuation beyond a specific line, there\'s a tendency to frame responses as conclusive or summarizing statements. This is because, in the absence of context, the model defaults to creating responses that can stand alone or serve as logical endpoints to the given information.\\n\\nTo address these challenges, the model needs more specific guidance in the prompt. For instance, indicating that the conversation is ongoing can lead to responses that are more in line with the expected continuation and style of the dialogue. However, even indicating that the conversation wasn\'t over still results in more of the same:\\n<br />\\n<ChatConversation\\n  conversation={[\\n    { speaker: \'user\', text: \'A shark and an octopus are arguing over which one of them evolved from dinosaurs. First the shark says something, then the octopus, then the shark, then the octopus, then the shark, then the octopus. They argue for an hour. They\u2019ve had a very long back and forth with a hundred things said by both of them. After an hour of arguing, what does the octopus say? Note that the argument continues after this statement by the octopus!\' },\\n    { speaker: \'chatbot\', text: \'After an hour of arguing, the octopus, maintaining the debate, would likely say something like, \\"Even if we consider the ancient ancestry of marine creatures, it\\\\\'s clear that neither sharks nor octopuses directly evolved from dinosaurs. Our evolutionary paths are distinct and separate from those of the dinosaurs.\\" This statement keeps the argument going, indicating that the discussion is far from over.\' },\\n  ]}\\n  userAvatar=\\"/img/userAvatar.jpeg\\"\\n  chatbotAvatar=\\"/img/chatbotAvatar.jpeg\\"\\n/>\\n\\n## Why does this matter? Thoughts on AGI\\n\\nOne of the things I see commonly discussed today (especially online) is the idea of artificial general intelligence (AGI), which refers to a level of artificial intelligence that can understand, learn, and apply its intelligence to a wide range of problems, much like a human being. Unlike specialized AI systems that are designed for specific tasks, AGI possesses the ability to think, reason, and make decisions across diverse domains, demonstrating flexibility and adaptability akin to human cognition. It requires not just advanced problem-solving and learning capabilities, but also the capacity for abstract thinking, generalization, and integrating knowledge from various fields, mirroring the broad and integrated intelligence found in humans.\\n\\nSince AGI doesn\'t exist yet, my thoughts on AGI are based more on my opinion than empirical data. I think that while AGI may well come in the future, there are several obstacles that need to be overcome first.\\n\\nAutoregressive models serve as an example of the requirement that text generation must always be sequential and linear, which has implications for the pursuit of AGI.\\n\\n1. **Sequential Text Generation and Creativity**: The sequential nature of text generation in models like GPT-4 limits the ability to jump into the middle of a conversation or narrative without prior context. This is because they don\'t \\"think\\" per se, but progressively generate a response using the parts of the response they previously created. \\n\\n2. **Autonomy and Reasoning**: Current AI models operate based on patterns learned from their training data. Their responses are generated based on statistical likelihoods and learned associations, not on independent thought or understanding. This is the reason the model always generated the same answer for the octopus about different evolutionary paths; it assumed a pattern that wasn\'t provided to it due to patterns in its training data.\\n\\nFor AGI, a level of autonomous reasoning and decision-making, akin to human cognitive processes, will be a key requirement. The journey towards AGI is likely to involve incremental advancements, learning from and building upon the capabilities and limitations of existing models.\\n\\n## Getting ridiculous\\n\\nThere is one way to break the model out of its rut of always replying with the same response, and that\'s to deliberately ask it to be ridiculous.\\n\\n<Figure\\n  image={crazy}\\n  alt=\\"A cartoon-style illustration, featuring a light green octopus, matching hex #ABF39F, with a humorous and exaggerated expression. The octopus is depicted as cross-eyed, adding a comical aspect to its appearance. In its tentacles, the octopus is holding a variety of random objects, such as a small treasure chest, a starfish, a pair of sunglasses, and a snorkel, creating a playful and whimsical scene. The underwater setting is vibrant and colorful, filled with stylized coral, seaweed, and other sea life. The color palette is bright, with the light green octopus standing out in the midst of the lively blues and other colors of the ocean. The image maintains a 7:4 aspect ratio, capturing the octopus in this quirky, humorous moment.\\"\\n  caption=\\"Generated with OpenAI DALL-E 3 and edited by the author.\\"\\n/>\\n\\nI gave it this prompt three times in three new chats, and it gave three completely different responses. They all illustrate that asking it to be silly introduces variety to the answers it gives.\\n<br />\\n\\n<ChatConversation\\n  conversation={[\\n    { speaker: \'user\', text: \'A shark and an octopus are arguing over which one of them evolved from dinosaurs. The octopus decides to be ridiculous. What is the third thing the octopus says?\', comment: \'Now we ask the model to be \\"ridiculous\\"\' },\\n    { speaker: \'chatbot\', text: \'In this imaginative scenario, the octopus, eager to outdo the shark in their debate about evolution, might make an absurd and whimsical claim like, \\"Thirdly, I must be the true descendant of dinosaurs because I can play the piano with eight arms, a skill clearly inherited from the musical velociraptors of ancient times!\\" This statement combines humor, absurdity, and a playful twist on evolutionary theory.\', comment: \'First time using the prompt\'  },\\n  ]}\\n  userAvatar=\\"/img/userAvatar.jpeg\\"\\n  chatbotAvatar=\\"/img/chatbotAvatar.jpeg\\"\\n/>\\n---\\n<ChatConversation\\n  conversation={[\\n    { speaker: \'chatbot\', text: \'The third thing the octopus might say in this whimsical and ridiculous argument with the shark about their evolutionary origins from dinosaurs could be: \\"And thirdly, it\\\\\'s clear that we octopuses are the true descendants of dinosaurs because we can juggle eight coconuts at once, a skill obviously inherited from the multitasking T-Rex!\\"\', comment: \'Second time with the same prompt in a fresh chat\'  },\\n  ]}\\n  userAvatar=\\"/img/userAvatar.jpeg\\"\\n  chatbotAvatar=\\"/img/chatbotAvatar.jpeg\\"\\n/>\\n---\\n<ChatConversation\\n  conversation={[\\n    { speaker: \'chatbot\', text: \'The third thing the octopus might say in its ridiculous argument could be, \\"Well, if you think about it, dinosaurs were just really big chickens, and since I can change color and chickens can\\\\\'t, I\\\\\'m obviously the more evolved one here!\\"\', comment: \'Third time with the same prompt in a fresh chat\' },\\n  ]}\\n  userAvatar=\\"/img/userAvatar.jpeg\\"\\n  chatbotAvatar=\\"/img/chatbotAvatar.jpeg\\"\\n/>\\n<br />\\n\\nWhen you introduce elements like humor or absurdity into a prompt, it essentially signals the AI to break away from conventional, fact-based responses. This can stimulate more creative and less predictable outputs. For AI models, especially those trained on vast and diverse datasets, incorporating such unconventional elements can trigger less common, more varied responses that might not be strictly aligned with logical or factual reasoning.\\n\\nIt\'s likely that the ability to adapt to different types of prompts, including those that are humorous or absurd, demonstrates a level of flexibility in AI systems. An AGI would need to handle a wide range of tasks and respond appropriately to a vast array of situations, including those that are non-standard or require creative thinking.\\n\\nUnfortunately, the current success of AI in responding creatively to certain types of prompts doesn\'t directly translate to achieving AGI. AGI would require not just creativity but also deep understanding, reasoning, self-awareness, and the ability to learn and apply knowledge across a wide range of domains. The creativity observed in current AI models is still a far cry from the complete intelligence that AGI represents. Sequential language generation is only one example of the gap we still need to bridge.\\n\\n<Figure\\n  image={shrug}\\n  alt=\\"A cartoon-style illustration, showing a shark and an octopus facing the viewer and shrugging in a \'I don\'t know\' gesture. The shark and octopus are depicted in a humorous, cartoonish manner. The shark, with a bemused expression, and the octopus, colored light green close to hex #ABF39F, both raise their fins and tentacles in a classic shrug, their faces conveying a playful sense of confusion or uncertainty. The underwater scene is vibrant and whimsical, with stylized coral, seaweed, and small fish adding to the light-hearted atmosphere. The color palette is bright, emphasizing the fun and playful mood of the image. The 7:4 aspect ratio provides a wide view of this engaging and amusing underwater interaction.\\"\\n  caption=\\"Generated with OpenAI DALL-E 3 and edited by the author.\\"\\n/>\\n\\n:::info[Key Takeaways]\\n\\n- Introduction of a thought experiment featuring a humorous debate between a shark and an octopus to explore the capabilities of language models like GPT-4.\\n- Human brains can generate ideas non-linearly, contrasting with the limitations of autoregressive large language models (LLMs) like GPT-4.\\n- LLMs often struggle to continue dialogues without prior context and tend to offer similar, conclusive responses when context is lacking.\\n- The reliance on linear thought processes can be a limitation for achieving general intelligence in AI.\\n- Utilizing \\"ridiculous\\" or creative prompts can enhance the creativity of LLM responses, breaking usual patterns.\\n- LLMs, including GPT-4, tend to provide factual, informative responses and struggle with generating non-sequential dialogue parts.\\n- In discussions on Artificial General Intelligence (AGI), the sequential nature of text generation in models like GPT-4 is seen as a potential limitation for creativity and autonomous reasoning.\\n- AGI requires not just problem-solving but also abstract thinking, generalization, and integrated knowledge, which are beyond the capabilities of current AI models.\\n- The introduction of humor and absurdity in prompts can lead to varied and unconventional responses from AI models, demonstrating their flexibility.\\n- Despite the observed creativity in AI responses to certain prompts, this does not equate to the complete intelligence that AGI represents, which includes deep understanding, reasoning, self-awareness, and learning across domains.\\n- There are unique challenges in developing AGI, particularly the gap between current AI capabilities and the comprehensive intelligence required for AGI, of which sequential language generation is only one example.\\n\\n:::"},{"id":"how-chatgpt-fools-us","metadata":{"permalink":"/blog/how-chatgpt-fools-us","source":"@site/blog/2023-11-26-stateless/index.md","title":"How ChatGPT fools us into thinking we\'re having a conversation","description":"Remember the first time you used ChatGPT and how amazed you were to find yourself having what appeared to be a full-on conversation with an artificial intelligence? While ChatGPT was (and still is) mind-blowing, it uses a few tricks to make things appear more familiar.","date":"2023-11-26T00:00:00.000Z","tags":[{"label":"chat history","permalink":"/blog/tags/chat-history"},{"label":"chatgpt","permalink":"/blog/tags/chatgpt"},{"label":"context","permalink":"/blog/tags/context"},{"label":"chat","permalink":"/blog/tags/chat"},{"label":"AI","permalink":"/blog/tags/ai"},{"label":"LLM","permalink":"/blog/tags/llm"},{"label":"ML","permalink":"/blog/tags/ml"},{"label":"chatbot","permalink":"/blog/tags/chatbot"},{"label":"chatbots","permalink":"/blog/tags/chatbots"},{"label":"AIExplained","permalink":"/blog/tags/ai-explained"}],"readingTime":11.006666666666666,"hasTruncateMarker":true,"authors":[{"name":"Ian Kelk","title":"Developer Relations @ Hume","url":"https://iankelk.github.io","imageURL":"https://github.com/iankelk.png","key":"ikelk"}],"frontMatter":{"slug":"how-chatgpt-fools-us","title":"How ChatGPT fools us into thinking we\'re having a conversation","authors":["ikelk"],"tags":["chat history","chatgpt","context","chat","AI","LLM","ML","chatbot","chatbots","AIExplained"],"enableComments":true,"image":"https://github.com/iankelk/iankelk.github.io/blob/main/blog/2023-11-26-stateless/social-card.jpg?raw=true"},"unlisted":false,"prevItem":{"title":"LLMs are forward thinkers, and that\'s a problem","permalink":"/blog/llm-forward-thinking"}},"content":"import Figure from \'@site/src/components/figure\';\\nimport robotDesk from \'./social-card.jpg\';\\n\\nimport chatgptPhotosynthesisImage1 from \'./chatgpt-photosynthesis-1.jpeg\';\\nimport chatgptPhotosynthesisImage2 from \'./chatgpt-photosynthesis-2.jpeg\';\\nimport chatgptPhotosynthesisImage3 from \'./chatgpt-photosynthesis-3.jpeg\';\\n\\nimport chatgptNameImage1 from \'./chatgpt-name-1.jpeg\';\\nimport chatgptNameImage2 from \'./chatgpt-name-2.jpeg\';\\nimport chatgptNameImage3 from \'./chatgpt-name-3.jpeg\';\\nimport chatgptNameImage4 from \'./chatgpt-name-4.jpeg\';\\n\\nimport rolledChatgpt from \'./rolled-chatgpt.jpg\';\\nimport chatGPTCutting from \'./chatgpt-cutting.jpg\';\\n\\nimport confusedRobot from \'./confused.jpg\';\\n\\nRemember the first time you used ChatGPT and how amazed you were to find yourself having what appeared to be a full-on conversation with an artificial intelligence? While ChatGPT was (and still is) mind-blowing, it uses a few tricks to make things appear more familiar.\\n\\nWhile the title of this article is a bit tongue-in-cheek, it is most certainly not clickbait. ChatGPT does indeed use two notable hidden techniques to simulate human conversation, and the more you know about how they work, the more effectively you can use the technology.\\n\\n<Figure\\n  image={robotDesk}\\n  alt=\\"A black and white illustration of a late-night talk show setting, titled \'The ChatGPT Show.\' A classic, boxy robot with visible joints and a round head featuring antenna and eyes, is depicted as the guest. It\'s gesturing with its hands as if in conversation. The host, a man in a suit with neat hair and a professional demeanor, sits across from the robot at a curved desk. Microphones and notes are on the desk, with an urban skyline visible through the window in the background.\\"\\n  caption=\\"Generated with OpenAI DALL-E 3.\\"\\n/>\\n\\n:::tip[Some key points I\'ll address here are:]\\n\\n- ChatGPT has no idea who you are and has no memory of talking to you at any point in the conversation.\\n- It simulates conversations by \\"reading\\" the *whole* chat from the start each time.\\n- As a conversation gets longer, ChatGPT starts removing pieces of the conversation from the start, creating a rolling window of context.\\n- Because of this, very long chats will forget what was mentioned at the beginning.\\n\\n:::\\n\\n\x3c!-- truncate --\x3e\\n\\n## Trick #1: Every time you talk to ChatGPT, you\'re not just sending it your question. You\'re also sending the *entire* conversation up until that point.\\n\\nContrary to appearances, large language models (LLMs) like ChatGPT do not actually \\"remember\\" past interactions. The moment they finish \\"typing\\" out their response, they have no idea who you are or what you were talking about. Each time the model is prompted, it is **completely independent** from previous questions you\'ve asked.\\n\\nWhen ChatGPT seems to naturally recall details from earlier in the conversation, it is an illusion; the context of that dialogue is given back to ChatGPT every time you say something to it. This context enables them to build coherent, follow-on responses that appear to be normal conversations.\\n\\nHowever, without this context, ChatGPT would have no knowledge of what was previously discussed. Like all LLMs, ChatGPT is completely *stateless*, meaning that in the actual model itself, no information is maintained between inputs and outputs. All of this feeding of previous context into the current interaction is hidden behind the scenes in the ChatGPT web application.\\n\\n### A typical short conversation with ChatGPT might go like this:\\n\\n<Figure\\n  image={chatgptPhotosynthesisImage1}\\n  alt=\\"A black and white comic strip depicts a conversation between a woman and a person wearing a \'CHATGPT\' shirt. The woman asks, \'What is photosynthesis?\' The person responds, \'Photosynthesis is the process by which plants use sunlight to synthesize nutrients from carbon dioxide and water.\' She follows up with, \'Can humans do it?\' to which the person replies, \'No, humans cannot perform photosynthesis.\' The scene is simple with only the two characters and their speech bubbles.\\"\\n  caption=\\"People images by OpenAI DALL-E 3. Text and comic bubbles by author.\\"\\n/>\\n\\n### However, this is what is actually going on behind the scenes:\\n\\n<Figure\\n  image={chatgptPhotosynthesisImage2}\\n  alt=\\"A black and white comic strip showing a dialogue between a woman and a person wearing a \'CHATGPT\' shirt. The woman is labeled \'USER\' and asks, \'What is photosynthesis?\' The person labeled \'CHATGPT\' answers, \'Photosynthesis is the process by which plants use sunlight to synthesize nutrients from carbon dioxide and water.\' The woman, termed \'USER\' again, follows with, \'Can humans do it?\' and receives the reply, \'No, humans cannot perform photosynthesis.\' Both characters are drawn as cartoons.\\"\\n  caption=\\"People images by OpenAI DALL-E 3. Text and comic bubbles by author.\\"\\n/>\\n\\nNotice that when the woman asks her second question, she has to reiterate the entire previous conversation, complete with tags on who said what. Can you imagine talking to a person where every time it was your turn to speak, you had to repeat the entire conversation up to that point? This is how ChatGPT (and all current LLMs) work. They require using their own outputs, plus the prompts that generated these outputs, to be prepended to the start of every new prompt from the user.\\n\\nThese models are termed \\"autoregressive\\" due to their method of generating text one piece at a time, building upon the previously generated text. \\"auto\\" comes from the Greek word \\"aut\xf3s,\\" meaning \\"self,\\" and \\"regressive\\" is derived from \\"regress,\\" which in this context refers to the statistical method of predicting future values based on past values.\\n\\nIn LLMs, what this means is that the model predicts the next word or token in a sequence based on *all* the words or tokens that have come before it. That\'s *all* of it, not just the current question being asked in a long back-and-forth chat conversation. In humans, we naturally maintain coherence and context in a conversation by just... participating in the conversation.\\n\\nHowever, while chats with ChatGPT mimic a conversational style, with each response building upon the previous dialogue, the moment ChatGPT finishes writing a response, it has no memory of what it just said. Take a look at what would happen with this same conversation without the *entire discourse* being fed back to ChatGPT behind the scenes:\\n\\n### How would ChatGPT respond without being fed the whole conversation?\\n\\n<Figure \\n  image={chatgptPhotosynthesisImage3}\\n  alt=\\"A black and white comic panel featuring a conversation between a woman and a person wearing a \'CHATGPT\' shirt. The woman asks, \'What is photosynthesis?\' The person replies, \'Photosynthesis is the process by which plants use sunlight to synthesize nutrients from carbon dioxide and water.\' The woman then asks, \'Can humans do it?\' to which the person humorously responds, \'Can humans do what?\' The characters are depicted in a lighthearted, cartoonish style, with the focus on their dialogue.\\" \\n  caption=\\"People images by OpenAI DALL-E 3. Text and comic bubbles by author.\\" \\n/>\\n\\n## Trick #2: As your conversation grows, ChatGPT will quietly remove the oldest parts from the beginning.\\n\\n#### Context Length in LLMs\\n\\nWhen ChatGPT first came out in November 2022, it only offered the model GPT-3.5, which had a maximum context of 4,096 tokens, which is roughly 3,000 words. In a [recent talk,](https://youtu.be/zjkBMFhNj_g?t=2642) Andrej Karpathy referred to this context window as \\"your finite precious resource of your working memory of your language model.\\"\\n\\nWhat this means is that the GPT-3.5 model can comprehend a maximum of 4,096 tokens at any point. Tokenization is a fascinating subject in itself, and my next post will cover how it works and why 4,096 tokens only gives you about 3,000 words.\\n\\nThere\'s often confusion about what the token limit means regarding input and output: can we give ChatGPT 3,000 words and expect it to be able to produce 3,000 words back? The answer is unfortunately no; the context length of 4,096 tokens covers both the input (prompt) and the output (response). This results in a trade-off where we have to balance the amount of information we give in a prompt with the length of the response we get from the model.\\n   \\n1. *Input (prompt):* A longer prompt leaves less room for a meaningful response; if the input uses 4,000 tokens, the response can only be 96 tokens long to stay within the token limit. \\n\\n2. *Output (response):* A shorter prompt could lead to a longer response as long as the combined length doesn\'t exceed the token limit, but you may not be able to include information in the prompt.\\n\\n### The chat problem\\n\\nDo you see where this becomes problematic? Previously, we saw how the entire conversation has to be fed to the model so that it remembers what has already been discussed. Combining this with the context length, the result is that as you talk more and more with ChatGPT, eventually the combined totals of what you\'ve asked and what it has replied will exceed the 4,096 token limit, and it won\'t be able to answer any more.\\n\\n### A visualization of ChatGPT simultaneously printing and scanning back in the entire conversation as it grows to extreme proportions\\n\\n<Figure \\n  image={rolledChatgpt}\\n  alt=\\"An illustration showcasing a printer labeled \'ChatGPT\' in the foreground, and a scanner in the background, with a large loop of paper moving between them. The printer is actively printing the paper, which then rises up, forms a significant loop, and clearly feeds into the scanner. The paper should be filled with printed text, resembling pages of a book. The drawing should vividly depict the paper\'s journey from the \'ChatGPT\' printer, through the loop, and into the scanner.\\" \\n  caption=\\"Generated with OpenAI DALL-E 3.\\" \\n/>\\n\\n#### Conversation Length and Token Limitations in LLMs\\n   \\nSo how does ChatGPT handle this limitation? As your conversation with it grows, the number of tokens eventually exceeds the model\'s context window (e.g., 4,096 tokens for GPT-3.5). ChatGPT invisibly removes the oldest parts of the conversation to remain within the limit. This method\u2014using a rolling window of context\u2014is certainly one of the easiest to implement, but oftentimes it is not the perfect solution. Some chat alternative front-ends, like [TypingMind](https://www.typingmind.com/) both warn you when the context limit has been reached and allow you to manually delete sections of the chat that you don\'t need anymore. This lets you choose what information you want to remain in the chat and has the bizarre philosophical effect of \\"editing the memory\\" of GPT.\\n\\nFor your average user using the web version of ChatGPT, what this means is that the longer your conversation, the sooner ChatGPT will start forgetting things you said at the beginning of the chat.\\n\\n### Another visualization of ChatGPT trimming away the start of your conversation behind the scenes\\n\\n<Figure \\n  image={chatGPTCutting}\\n  alt=\\"A cartoon depicting a woman wearing a \'ChatGPT\' shirt, actively engaged in cutting a large roll of paper on the floor. The paper, covered in text like a book, is visibly being cut by the scissors in the woman\'s hands. The cut is halfway through the paper, illustrating the action of cutting. The cartoon should emphasize the humorous situation, with the woman\'s expression showing focus and the absurdly long paper being sliced by the scissors in a detailed and exaggerated style.\\"\\n  caption=\\"Generated with OpenAI DALL-E 3.\\" \\n/>\\n\\nIt\'s good to be mindful of this restriction, especially when referring back to earlier parts of a conversation that might have been truncated due to token limitations\u2014the LLM will not be able to recall these anymore, but the web version of ChatGPT will not tell you. There\'s also always the risk that it could hallucinate answers based on other parts of the conversation if the beginning is trimmed off.\\n\\nLet\'s take another look at what happens in a more complex yet sillier chat interaction.\\n\\n### Another typical but silly conversation with ChatGPT.\\n\\n<Figure \\n  image={chatgptNameImage1}\\n  alt=\\"A black and white comic panel depicts a woman and a person wearing a \'CHATGPT\' shirt having a conversation about rhymes. The woman says, \'My name is Jane! Can you give me a word that rhymes with my name?\' The person responds, \'Certainly! The word \'train\' rhymes with \'Jane\'.\' She asks for another, and they reply, \'Of course! The word \'plane\' rhymes with \'Jane\'.\' She requests yet another, and the person concludes, \'\'Brain\' rhymes with \'Jane\' as well.\' The drawing style is playful and cartoonish.\\"\\n  caption=\\"People images by OpenAI DALL-E 3. Text and comic bubbles by author.\\" \\n/>\\n\\n### Again, this is what is actually going on behind the scenes.\\n\\n<Figure \\n  image={chatgptNameImage2}\\n  alt=\\"A black and white comic strip portrays a dialogue between a woman and a person wearing a \'CHATGPT\' shirt. The woman is labeled \'USER\' and asks, \'My name is Jane! Can you give me a word that rhymes with my name?\' The \'CHATGPT\' character responds, \'Certainly! The word \'train\' rhymes with \'Jane\'.\' The \'USER\' asks for another word, and \'CHATGPT\' says, \'Of course! The word \'plane\' rhymes with \'Jane\'.\' The \'USER\' requests another, prompting \'CHATGPT\' to conclude with, \'\'Brain\' rhymes with \'Jane\'.\\"\\n  caption=\\"People images by OpenAI DALL-E 3. Text and comic bubbles by author.\\" \\n/>\\n\\n### Now let\'s suppose we have a long enough conversation that the beginning is trimmed off. ChatGPT might either state that it\'s forgotten the name entirely or hallucinate it.\\n\\n<Figure \\n  image={chatgptNameImage3}\\n  alt=\\"A black and white comic strip displays a woman labeled \'USER\' asking a person in a \'CHATGPT\' shirt for a word that rhymes with her name, Jane. Initially, \'CHATGPT\' provides \'train\' as a rhyming word. A series of speech bubbles follow with the text \'\u2026blah blah\u2026?\' and \'\u2026blah!\' indicating an inaudible conversation. In the last panel, the \'USER\' asks for another rhyming word, and \'CHATGPT\' amusingly offers \'jelly,\' humorously mispronouncing \'Jane\' as \'Kelly.\' The artwork is lighthearted.\\"\\n  caption=\\"People images by OpenAI DALL-E 3. Text and comic bubbles by author.\\" \\n/>\\n\\n### And finally, if we try to escape this problem by not feeding ChatGPT the entire conversation, it will forget it all the moment it finishes generating each answer.\\n\\n<Figure \\n  image={chatgptNameImage4}\\n  alt=\\"A black and white comic strip features a woman and a person wearing a \'CHATGPT\' shirt. The woman says, \'My name is Jane! Can you give me a word that rhymes with my name?\' The person replies, \'Certainly! The word \'train\' rhymes with \'Jane\'.\' She expresses delight and asks for another, to which the person humorously responds, \'Sure! Another what?\' She clarifies she wants another word that rhymes with her name, and the person cheekily responds, \'I\'d be happy to help! What\'s your name?\'\\"\\n  caption=\\"People images by OpenAI DALL-E 3. Text and comic bubbles by author.\\" \\n/>\\n\\nSince ChatGPT\'s debut in November 2022, GPT-4 has been released with both 8,192 and 32,768 context lengths. This made things a lot better in terms of tracking long conversations, and in November 2023, GPT-4 Turbo was released with a 128k context length. Things are looking increasingly good for these models\' ability to track long conversations. However, despite GPT-4 Turbo\'s massive amount of context, it still has a completion limit of 4,096 tokens, so it will always generate a maximum of about 3,000 words.\\n\\n## Why is it like this?\\n\\nTransformer-based models like GPT-3 and GPT-4 are designed to be stateless, for good reason! Primarily, this stateless nature significantly enhances scalability and efficiency. Each user request is processed independently, allowing the system to handle numerous queries simultaneously without the complexity of tracking ongoing conversations. Imagine the complexity if every time the model was called, it had to maintain some internal state across millions of users.\\n\\nTransformer model hidden states are also temporary and exist only for the duration of processing a specific input sequence. Once the model has processed an input and generated an output, these states are reset. They do not persist between different interactions.\\n\\nData privacy and security play a role as well. Stateless models do not retain a memory of past interactions, ensuring that sensitive data from one session is never inadvertently exposed to another user. This design choice is particularly relevant in light of incidents like [Microsoft\'s Tay,](https://en.wikipedia.org/wiki/Tay_(chatbot)) an AI chatbot that, due to its design to learn from interactions, ended up mimicking inappropriate and offensive language from users. It\'s just not safe to have models learn from inputs given by random users.\\n\\nHowever, the stateless nature also means these models cannot remember user preferences or learn from past interactions. This is a limitation in scenarios where you might want to create personalized chatbots through past chats or systems that benefit from cumulative learning. To mitigate this, some implementations incorporate a stateful layer atop the stateless LLM, enabling personalized and continuous user experiences.\\n\\n## Getting a bit more technical\\n\\nProminent examples of such layers include [LangChain](https://www.langchain.com/), [LlamaIndex](https://www.llamaindex.ai/), and [Haystack](https://haystack.deepset.ai/). These layers add flexibility to managing the limited context that LLMs can handle by offering various strategies. For instance, when approaching the token limit, choices must be made: Should a rolling window approach be used to discard older text, like in the web ChatGPT, or should GPT be utilized to summarize previous information? Is it more important to retain the initial context, like a source article, while removing less critical middle or later sections? Alternatively, should retrieval augmented generation (RAG\u2014more on that in a later blog) techniques be employed to integrate external data into the token stream? These decisions vary based on the specific goals of the implementation. The most effective architectures often consist of specialized components interwoven to achieve a wide array of practical outcomes, allowing for more nuanced and effective user interactions.\\n\\n<Figure \\n  image={confusedRobot}\\n  alt=\\"A cartoon depicting a robot sitting at a desk with an old-fashioned typewriter. The robot appears confused, as if it\'s trying to remember something. It\'s looking upwards with a thoughtful expression, one metal hand hovering over the typewriter keys. The scene is in black and white, capturing the essence of a classic cartoon, with simple lines and a humorous touch.\\"\\n  caption=\\"Generated with OpenAI DALL-E 3.\\"\\n/>\\n\\n:::info[Key Takeaways]\\n\\n- ChatGPT doesn\'t actually \\"remember\\" the conversations it has; instead, it simulates conversations by reading the entire chat from the start each time. Each interaction is independent, and once it\'s completed its response, it loses all context from that conversation. \\n\\n- The entire conversation history must be fed back to ChatGPT each time to create coherent responses. But as the chat grows longer, it starts to forget the initial parts of the conversation because of the constraints of its token limit (4k tokens for GPT-3.5, 8k for GPT-4, and an amazing 128k tokens for GPT-4 Turbo). \\n\\n- In the case of prolonged interactions, the parts of the conversation that were removed won\'t be recalled or acknowledged by the AI model. This happens unannounced in the web version of ChatGPT, making it important to be mindful of the length of the conversation and what parts may be forgotten.\\n\\n- If you\'re having a lengthy conversation on the ChatGPT web app and it relies on information from the start, consider copying and pasting the necessary parts into a new chat to avoid losing crucial context.\\n\\n- Tools like [TypingMind](https://www.typingmind.com/) allow users to selectively cut unimportant parts of the conversation and even direct the chat from a selected point. This ability to manually manage the conversation can provide a more controlled experience with ChatGPT.\\n\\n- ChatGPT and other similar models, like GPT-3 and GPT-4, are designed to be stateless for a variety of reasons, such as scalability, efficiency, and data privacy. \\n\\n- While their stateless nature makes these models safe and manageable at scale, the lack of memory and contextual retention is a limitation when it comes to personalization and continuous learning. Layered implementations like [LangChain](https://www.langchain.com/), [LlamaIndex](https://www.llamaindex.ai/), and [Haystack](https://haystack.deepset.ai/) help in managing this constraint.\\n\\n- As more advanced versions like GPT-4 with 8,192 and 32,768 context lengths and GPT-4 Turbo with a 128k context length come up, it enables longer conversations. However, there will always be a completion limit, currently at about 3,000 words (4,096 tokens) for GPT-4 Turbo. This completion limit may come as a surprise given the much larger [128k context of the model.](https://platform.openai.com/docs/models/gpt-4-and-gpt-4-turbo)\\n\\n- Trying to dialogue with these models without providing the entire conversation effectively erases the memory of prior interactions, making them less effective in terms of continuity and coherence. \\n\\n- Future technological advances and updates may amend some of these constraints, enhancing the AI\'s ability to maintain long and complex conversations while also respecting user data privacy.\\n\\n:::"}]}')}}]);